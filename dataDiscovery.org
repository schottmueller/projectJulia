#+TITLE:   Working with Data
#+AUTHOR:    Christoph Schottmueller
#+EMAIL:    
#+DATE:     
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t 
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc 
#+INFOJS_OPT: view:nil toc:nil ltoc:nil mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_HEAD: <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"> </script>

* Generating and accessing DataFrames

The DataFrames package allows to work with data. Usually, one loads some data from outside but for now we will generate a toy data frame ourselves. Then we add another oservation to the dataset using vertical concatenation ("vcat") and add the variable age.

#+name: generate
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 
using DataFrames

df = DataFrame(name = ["Alice", "Bob", "Carrol"], height = [160, 180, 171])

df = vcat(df,DataFrame(name="Dave",height=175))

df.age=[20,28,24,26]

df

#+END_SRC

#+RESULTS: generate
#+begin_example
4×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Alice  │ 160    │ 20    │
│ 2   │ Bob    │ 180    │ 26    │
│ 3   │ Carrol │ 171    │ 20    │
│ 4   │ Dave   │ 169    │ 26    │
2×2 DataFrame
│ Row │ age   │ height_mean │
│     │ Int64 │ Float64     │
├─────┼───────┼─────────────┤
│ 1   │ 20    │ 165.5       │
│ 2   │ 26    │ 174.5       │
#+end_example


Next we show how to access data. There are multiple ways. First, we can access the data like an array, i.e. df[1,2] accesses the first row, second column. We can use ranges like 1:2 to select several rows (or columns). Variables can be accessed by name as well. The keyword "end" is useful as one does not have to know how many observations there are. The range ":" is a shorthand for "1:end". It is also possible to use regular expressions when working with strings to filter for example rows in which the name contains "ob".

#+name: read
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using DataFrames
df = DataFrame(name = ["Alice", "Bob", "Carrol"], height = [160, 180, 171])

df[1,2]

df[1:2,2]

df.name

df[1:2,:name]

df[2:end,:]

df[[occursin(r"ob",x) for x in df.name],:]

#+END_SRC

#+RESULTS: read
#+begin_example
df = DataFrame(name=["Alice", "Bob", "Carrol"], height=[160, 180, 171]) = 3×2 DataFrame
│ Row │ name   │ height │
│     │ String │ Int64  │
├─────┼────────┼────────┤
│ 1   │ Alice  │ 160    │
│ 2   │ Bob    │ 180    │
│ 3   │ Carrol │ 171    │
3×2 DataFrame
│ Row │ name   │ height │
│     │ String │ Int64  │
├─────┼────────┼────────┤
│ 1   │ Alice  │ 160    │
│ 2   │ Bob    │ 180    │
│ 3   │ Carrol │ 171    │
160
2-element Array{Int64,1}:
 160
 180
3-element Array{String,1}:
 "Alice" 
 "Bob"   
 "Carrol"
2-element Array{String,1}:
 "Alice"
 "Bob"  
2×2 DataFrame
│ Row │ name   │ height │
│     │ String │ Int64  │
├─────┼────────┼────────┤
│ 1   │ Bob    │ 180    │
│ 2   │ Carrol │ 171    │
1×2 DataFrame
│ Row │ name   │ height │
│     │ String │ Int64  │
├─────┼────────┼────────┤
│ 1   │ Bob    │ 180    │
#+end_example

One can also use conditions, i.e. only read observations satisfying a certain condition like height>170. Note the "." in front of the ">" which means that the comparison is made elementwise, i.e. each element of the height column is compared to 170 and the result is a Vector of "true" and "false" values. One can also link several conditions. For more complex filtering, the "filter" function can be used.

#+name: readcond
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using DataFrames
df = DataFrame(name = ["Alice", "Bob", "Carrol"], height = [160, 180, 171])

df.height.>170

df[df.height.>170,:]

df = vcat(df,DataFrame(name="Dave",height=175))

df.age=[20,28,24,26]

df[(df.height.>170).&(df.age.>25),:]

filter(row->(row.height>170) & (row.age>25),df)

#+END_SRC

#+RESULTS: readcond
#+begin_example
3×2 DataFrame
│ Row │ name   │ height │
│     │ String │ Int64  │
├─────┼────────┼────────┤
│ 1   │ Alice  │ 160    │
│ 2   │ Bob    │ 180    │
│ 3   │ Carrol │ 171    │
3-element BitArray{1}:
 0
 1
 1
2×2 DataFrame
│ Row │ name   │ height │
│     │ String │ Int64  │
├─────┼────────┼────────┤
│ 1   │ Bob    │ 180    │
│ 2   │ Carrol │ 171    │
4×2 DataFrame
│ Row │ name   │ height │
│     │ String │ Int64  │
├─────┼────────┼────────┤
│ 1   │ Alice  │ 160    │
│ 2   │ Bob    │ 180    │
│ 3   │ Carrol │ 171    │
│ 4   │ Dave   │ 175    │
4-element Array{Int64,1}:
 20
 28
 24
 26
2×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Bob    │ 180    │ 28    │
│ 2   │ Dave   │ 175    │ 26    │
2×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Bob    │ 180    │ 28    │
│ 2   │ Dave   │ 175    │ 26    │
#+end_example

** Joining Data Frames

Joining different datasets is straightforward. Depending what should be done with observations that are not present in both datasets one has to specify the keyword "kind".

#+name: join
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 
using DataFrames

df1 = DataFrame(name = ["Alice", "Bob", "Carrol"], height = [160, 180, 171])
df2 = DataFrame(name = ["Alice", "Bob", "Dave"], age = [20,28,26])

df = join(df1,df2,on = :name,kind = :inner)
df = join(df1,df2,on = :name,kind = :outer)
df = join(df1,df2,on = :name,kind = :left)

#+END_SRC

#+RESULTS: join
#+begin_example
3×2 DataFrame
│ Row │ name   │ height │
│     │ String │ Int64  │
├─────┼────────┼────────┤
│ 1   │ Alice  │ 160    │
│ 2   │ Bob    │ 180    │
│ 3   │ Carrol │ 171    │
3×2 DataFrame
│ Row │ name   │ age   │
│     │ String │ Int64 │
├─────┼────────┼───────┤
│ 1   │ Alice  │ 20    │
│ 2   │ Bob    │ 28    │
│ 3   │ Dave   │ 26    │
2×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Alice  │ 160    │ 20    │
│ 2   │ Bob    │ 180    │ 28    │
4×3 DataFrame
│ Row │ name   │ height  │ age     │
│     │ String │ Int64⍰  │ Int64⍰  │
├─────┼────────┼─────────┼─────────┤
│ 1   │ Alice  │ 160     │ 20      │
│ 2   │ Bob    │ 180     │ 28      │
│ 3   │ Carrol │ 171     │ missing │
│ 4   │ Dave   │ missing │ 26      │
3×3 DataFrame
│ Row │ name   │ height │ age     │
│     │ String │ Int64  │ Int64⍰  │
├─────┼────────┼────────┼─────────┤
│ 1   │ Alice  │ 160    │ 20      │
│ 2   │ Bob    │ 180    │ 28      │
│ 3   │ Carrol │ 171    │ missing │
#+end_example

** Importing Data

Usually one does not generate one's own datasets (or inputs the data by hand) but instead one has a file with data that has to read in. (If you really need to input data by hand, it is probably better to do this in Libre Office Calc, then save the data as a ".csv" file and then read this file into julia as described below.) The most widely spread format for data files is ".csv" (comma separated values) and the following reads in a data file containing data on the number of AIDS cases as published by the [[http://data.euro.who.int/cisid][WHO]].

#+name: importcsv
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using CSV, DataFrames

df = DataFrame(CSV.File("CISID_HIV.csv";header=1))
#+END_SRC

#+RESULTS: importcsv
#+begin_example
44×4 DataFrame
│ Row │ Column1 │ country                                              │ 2009    │ 2010    │
│     │ Int64   │ String                                               │ Int64⍰  │ Int64⍰  │
├─────┼─────────┼──────────────────────────────────────────────────────┼─────────┼─────────┤
│ 1   │ 2       │ Albania                                              │ 32      │ 24      │
│ 2   │ 5       │ Andorra                                              │ 0       │ 0       │
│ 3   │ 10      │ Armenia                                              │ 84      │ 94      │
│ 4   │ 13      │ Austria                                              │ 102     │ 94      │
│ 5   │ 14      │ Azerbaijan                                           │ 109     │ 210     │
│ 6   │ 19      │ Belarus                                              │ 500     │ 543     │
│ 7   │ 20      │ Belgium                                              │ 120     │ 88      │
│ 8   │ 26      │ Bosnia and Herzegovina                               │ 2       │ 6       │
│ 9   │ 31      │ Bulgaria                                             │ 30      │ 32      │
│ 10  │ 51      │ Croatia                                              │ 13      │ 19      │
│ 11  │ 54      │ Czech Republic                                       │ 23      │ 26      │
│ 12  │ 58      │ Denmark                                              │ 36      │ 44      │
│ 13  │ 67      │ Estonia                                              │ 38      │ 26      │
│ 14  │ 72      │ Finland                                              │ 21      │ 33      │
│ 15  │ 73      │ France                                               │ 931     │ 951     │
│ 16  │ 78      │ Georgia                                              │ 284     │ 339     │
│ 17  │ 79      │ Germany                                              │ 565     │ 421     │
│ 18  │ 82      │ Greece                                               │ 96      │ 100     │
│ 19  │ 94      │ Hungary                                              │ 23      │ 28      │
│ 20  │ 95      │ Iceland                                              │ 0       │ 1       │
│ 21  │ 100     │ Ireland                                              │ 35      │ 38      │
│ 22  │ 102     │ Italy                                                │ 1183    │ 1102    │
│ 23  │ 112     │ Latvia                                               │ 99      │ 130     │
│ 24  │ 118     │ Lithuania                                            │ 37      │ 33      │
│ 25  │ 119     │ Luxembourg                                           │ 3       │ 8       │
│ 26  │ 125     │ Malta                                                │ 1       │ 6       │
│ 27  │ 133     │ Monaco                                               │ missing │ missing │
│ 28  │ 142     │ Netherlands                                          │ 262     │ 266     │
│ 29  │ 152     │ Norway                                               │ 18      │ 22      │
│ 30  │ 163     │ Poland                                               │ 127     │ 171     │
│ 31  │ 164     │ Portugal                                             │ 469     │ 474     │
│ 32  │ 168     │ Republic of Moldova                                  │ 262     │ 303     │
│ 33  │ 170     │ Romania                                              │ 247     │ 240     │
│ 34  │ 171     │ Russian Federation                                   │ missing │ missing │
│ 35  │ 179     │ San Marino                                           │ 0       │ 0       │
│ 36  │ 228     │ Serbia                                               │ 55      │ 49      │
│ 37  │ 186     │ Slovakia                                             │ 4       │ 2       │
│ 38  │ 187     │ Slovenia                                             │ 18      │ 7       │
│ 39  │ 191     │ Spain                                                │ 1368    │ 1097    │
│ 40  │ 197     │ Sweden                                               │ missing │ missing │
│ 41  │ 198     │ Switzerland                                          │ 145     │ 155     │
│ 42  │ 203     │ North Macedonia                                      │ 2       │ 6       │
│ 43  │ 214     │ Ukraine                                              │ 140     │ 621     │
│ 44  │ 216     │ United Kingdom of Great Britain and Northern Ireland │ 635     │ 671     │
#+end_example

The "CSV.File" command has some useful keyword arguments in case your data is separated not by "," but something else, e.g. if cells are separated by ";" you add "delim=';'" and if numbers use "," as decimal point, you also add "decimal=','". the keyword "header=1" means that the first row contains variables names. The keyword "missingstrings"  can be used to explain how missing values are coded, e.g. "missingstrings=["NA", "na", "n/a", "missing"]".

The CSV package can also be used to write data. The command is CSV.write(filename, table).

** Categorical variables
Often variables indicate to which of a few groups an observation belongs. These variables can be stored in a memory efficient way (this may be important for huge datasets). Categorical arrays are also supported by the GLM.jl package which is used for regression analysis.
#+name: categorical
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using CategoricalArrays, DataFrames
df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave"], group = ["A","B","B","A"], age = [20,26,20,26])

categorical!(df,:group,compress=true)

levels(df.group)

#+END_SRC


* Cleaning and preparing data
** Sorting data
It is easy to sort a dataset according to one or several variables, in increasing or reverse order.

#+name: sorting
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using DataFrames

df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave"], height = [160, 180, 171, 169], age = [20,26,20,26])

sort!(df,:age,rev=true)

sort!(df,(:age,:height),rev=(true,false))

#+END_SRC

#+RESULTS: sorting
#+begin_example
4×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Alice  │ 160    │ 20    │
│ 2   │ Bob    │ 180    │ 26    │
│ 3   │ Carrol │ 171    │ 20    │
│ 4   │ Dave   │ 169    │ 26    │
4×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Bob    │ 180    │ 26    │
│ 2   │ Dave   │ 169    │ 26    │
│ 3   │ Alice  │ 160    │ 20    │
│ 4   │ Carrol │ 171    │ 20    │
4×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Dave   │ 169    │ 26    │
│ 2   │ Bob    │ 180    │ 26    │
│ 3   │ Alice  │ 160    │ 20    │
│ 4   │ Carrol │ 171    │ 20    │
#+end_example

** Missing data
It function "ismissing(x)" is true if $x$ has the value "missing" and false otherwise. This allows to select rows with missing values or drop observations where a certain variable is missing. One can then change the missing value, for example to 0. A useful function is "completecases(df)" which returns a Boolean vector indicating which rows do not contain missing values. Finally, the "dropmissing(df)" function returns a copy of df without rows that contain missing values (without rows with missing values in variable x if "dropmissings(df,x)" is used).

#+name: missing
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using CSV, DataFrames

df = CSV.read("CISID_HIV.csv";header=1)

df2 = df[ismissing.(df[:,Symbol("2010")]),:]

coalesce.(df[:,Symbol("2010")],0)

df[completecases(df),:]

dropmissing(df)

dropmissing(df,Symbol("2009"))

#+END_SRC

#+RESULTS: missing
#+begin_example
44×4 DataFrame
│ Row │ Column1 │ country                                              │ 2009    │ 2010    │
│     │ Int64   │ String                                               │ Int64⍰  │ Int64⍰  │
├─────┼─────────┼──────────────────────────────────────────────────────┼─────────┼─────────┤
│ 1   │ 2       │ Albania                                              │ 32      │ 24      │
│ 2   │ 5       │ Andorra                                              │ 0       │ 0       │
│ 3   │ 10      │ Armenia                                              │ 84      │ 94      │
│ 4   │ 13      │ Austria                                              │ 102     │ 94      │
│ 5   │ 14      │ Azerbaijan                                           │ 109     │ 210     │
│ 6   │ 19      │ Belarus                                              │ 500     │ 543     │
│ 7   │ 20      │ Belgium                                              │ 120     │ 88      │
│ 8   │ 26      │ Bosnia and Herzegovina                               │ 2       │ 6       │
│ 9   │ 31      │ Bulgaria                                             │ 30      │ 32      │
│ 10  │ 51      │ Croatia                                              │ 13      │ 19      │
│ 11  │ 54      │ Czech Republic                                       │ 23      │ 26      │
│ 12  │ 58      │ Denmark                                              │ 36      │ 44      │
│ 13  │ 67      │ Estonia                                              │ 38      │ 26      │
│ 14  │ 72      │ Finland                                              │ 21      │ 33      │
│ 15  │ 73      │ France                                               │ 931     │ 951     │
│ 16  │ 78      │ Georgia                                              │ 284     │ 339     │
│ 17  │ 79      │ Germany                                              │ 565     │ 421     │
│ 18  │ 82      │ Greece                                               │ 96      │ 100     │
│ 19  │ 94      │ Hungary                                              │ 23      │ 28      │
│ 20  │ 95      │ Iceland                                              │ 0       │ 1       │
│ 21  │ 100     │ Ireland                                              │ 35      │ 38      │
│ 22  │ 102     │ Italy                                                │ 1183    │ 1102    │
│ 23  │ 112     │ Latvia                                               │ 99      │ 130     │
│ 24  │ 118     │ Lithuania                                            │ 37      │ 33      │
│ 25  │ 119     │ Luxembourg                                           │ 3       │ 8       │
│ 26  │ 125     │ Malta                                                │ 1       │ 6       │
│ 27  │ 133     │ Monaco                                               │ missing │ missing │
│ 28  │ 142     │ Netherlands                                          │ 262     │ 266     │
│ 29  │ 152     │ Norway                                               │ 18      │ 22      │
│ 30  │ 163     │ Poland                                               │ 127     │ 171     │
│ 31  │ 164     │ Portugal                                             │ 469     │ 474     │
│ 32  │ 168     │ Republic of Moldova                                  │ 262     │ 303     │
│ 33  │ 170     │ Romania                                              │ 247     │ 240     │
│ 34  │ 171     │ Russian Federation                                   │ missing │ missing │
│ 35  │ 179     │ San Marino                                           │ 0       │ 0       │
│ 36  │ 228     │ Serbia                                               │ 55      │ 49      │
│ 37  │ 186     │ Slovakia                                             │ 4       │ 2       │
│ 38  │ 187     │ Slovenia                                             │ 18      │ 7       │
│ 39  │ 191     │ Spain                                                │ 1368    │ 1097    │
│ 40  │ 197     │ Sweden                                               │ missing │ missing │
│ 41  │ 198     │ Switzerland                                          │ 145     │ 155     │
│ 42  │ 203     │ North Macedonia                                      │ 2       │ 6       │
│ 43  │ 214     │ Ukraine                                              │ 140     │ 621     │
│ 44  │ 216     │ United Kingdom of Great Britain and Northern Ireland │ 635     │ 671     │
3×4 DataFrame
│ Row │ Column1 │ country            │ 2009    │ 2010    │
│     │ Int64   │ String             │ Int64⍰  │ Int64⍰  │
├─────┼─────────┼────────────────────┼─────────┼─────────┤
│ 1   │ 133     │ Monaco             │ missing │ missing │
│ 2   │ 171     │ Russian Federation │ missing │ missing │
│ 3   │ 197     │ Sweden             │ missing │ missing │
44-element Array{Int64,1}:
   24
    0
   94
   94
  210
  543
   88
    6
   32
   19
   26
   44
   26
   33
  951
  339
  421
  100
   28
    1
   38
 1102
  130
   33
    8
    6
    0
  266
   22
  171
  474
  303
  240
    0
    0
   49
    2
    7
 1097
    0
  155
    6
  621
  671
41×4 DataFrame
│ Row │ Column1 │ country                                              │ 2009   │ 2010   │
│     │ Int64   │ String                                               │ Int64⍰ │ Int64⍰ │
├─────┼─────────┼──────────────────────────────────────────────────────┼────────┼────────┤
│ 1   │ 2       │ Albania                                              │ 32     │ 24     │
│ 2   │ 5       │ Andorra                                              │ 0      │ 0      │
│ 3   │ 10      │ Armenia                                              │ 84     │ 94     │
│ 4   │ 13      │ Austria                                              │ 102    │ 94     │
│ 5   │ 14      │ Azerbaijan                                           │ 109    │ 210    │
│ 6   │ 19      │ Belarus                                              │ 500    │ 543    │
│ 7   │ 20      │ Belgium                                              │ 120    │ 88     │
│ 8   │ 26      │ Bosnia and Herzegovina                               │ 2      │ 6      │
│ 9   │ 31      │ Bulgaria                                             │ 30     │ 32     │
│ 10  │ 51      │ Croatia                                              │ 13     │ 19     │
│ 11  │ 54      │ Czech Republic                                       │ 23     │ 26     │
│ 12  │ 58      │ Denmark                                              │ 36     │ 44     │
│ 13  │ 67      │ Estonia                                              │ 38     │ 26     │
│ 14  │ 72      │ Finland                                              │ 21     │ 33     │
│ 15  │ 73      │ France                                               │ 931    │ 951    │
│ 16  │ 78      │ Georgia                                              │ 284    │ 339    │
│ 17  │ 79      │ Germany                                              │ 565    │ 421    │
│ 18  │ 82      │ Greece                                               │ 96     │ 100    │
│ 19  │ 94      │ Hungary                                              │ 23     │ 28     │
│ 20  │ 95      │ Iceland                                              │ 0      │ 1      │
│ 21  │ 100     │ Ireland                                              │ 35     │ 38     │
│ 22  │ 102     │ Italy                                                │ 1183   │ 1102   │
│ 23  │ 112     │ Latvia                                               │ 99     │ 130    │
│ 24  │ 118     │ Lithuania                                            │ 37     │ 33     │
│ 25  │ 119     │ Luxembourg                                           │ 3      │ 8      │
│ 26  │ 125     │ Malta                                                │ 1      │ 6      │
│ 27  │ 142     │ Netherlands                                          │ 262    │ 266    │
│ 28  │ 152     │ Norway                                               │ 18     │ 22     │
│ 29  │ 163     │ Poland                                               │ 127    │ 171    │
│ 30  │ 164     │ Portugal                                             │ 469    │ 474    │
│ 31  │ 168     │ Republic of Moldova                                  │ 262    │ 303    │
│ 32  │ 170     │ Romania                                              │ 247    │ 240    │
│ 33  │ 179     │ San Marino                                           │ 0      │ 0      │
│ 34  │ 228     │ Serbia                                               │ 55     │ 49     │
│ 35  │ 186     │ Slovakia                                             │ 4      │ 2      │
│ 36  │ 187     │ Slovenia                                             │ 18     │ 7      │
│ 37  │ 191     │ Spain                                                │ 1368   │ 1097   │
│ 38  │ 198     │ Switzerland                                          │ 145    │ 155    │
│ 39  │ 203     │ North Macedonia                                      │ 2      │ 6      │
│ 40  │ 214     │ Ukraine                                              │ 140    │ 621    │
│ 41  │ 216     │ United Kingdom of Great Britain and Northern Ireland │ 635    │ 671    │
41×4 DataFrame
│ Row │ Column1 │ country                                              │ 2009  │ 2010  │
│     │ Int64   │ String                                               │ Int64 │ Int64 │
├─────┼─────────┼──────────────────────────────────────────────────────┼───────┼───────┤
│ 1   │ 2       │ Albania                                              │ 32    │ 24    │
│ 2   │ 5       │ Andorra                                              │ 0     │ 0     │
│ 3   │ 10      │ Armenia                                              │ 84    │ 94    │
│ 4   │ 13      │ Austria                                              │ 102   │ 94    │
│ 5   │ 14      │ Azerbaijan                                           │ 109   │ 210   │
│ 6   │ 19      │ Belarus                                              │ 500   │ 543   │
│ 7   │ 20      │ Belgium                                              │ 120   │ 88    │
│ 8   │ 26      │ Bosnia and Herzegovina                               │ 2     │ 6     │
│ 9   │ 31      │ Bulgaria                                             │ 30    │ 32    │
│ 10  │ 51      │ Croatia                                              │ 13    │ 19    │
│ 11  │ 54      │ Czech Republic                                       │ 23    │ 26    │
│ 12  │ 58      │ Denmark                                              │ 36    │ 44    │
│ 13  │ 67      │ Estonia                                              │ 38    │ 26    │
│ 14  │ 72      │ Finland                                              │ 21    │ 33    │
│ 15  │ 73      │ France                                               │ 931   │ 951   │
│ 16  │ 78      │ Georgia                                              │ 284   │ 339   │
│ 17  │ 79      │ Germany                                              │ 565   │ 421   │
│ 18  │ 82      │ Greece                                               │ 96    │ 100   │
│ 19  │ 94      │ Hungary                                              │ 23    │ 28    │
│ 20  │ 95      │ Iceland                                              │ 0     │ 1     │
│ 21  │ 100     │ Ireland                                              │ 35    │ 38    │
│ 22  │ 102     │ Italy                                                │ 1183  │ 1102  │
│ 23  │ 112     │ Latvia                                               │ 99    │ 130   │
│ 24  │ 118     │ Lithuania                                            │ 37    │ 33    │
│ 25  │ 119     │ Luxembourg                                           │ 3     │ 8     │
│ 26  │ 125     │ Malta                                                │ 1     │ 6     │
│ 27  │ 142     │ Netherlands                                          │ 262   │ 266   │
│ 28  │ 152     │ Norway                                               │ 18    │ 22    │
│ 29  │ 163     │ Poland                                               │ 127   │ 171   │
│ 30  │ 164     │ Portugal                                             │ 469   │ 474   │
│ 31  │ 168     │ Republic of Moldova                                  │ 262   │ 303   │
│ 32  │ 170     │ Romania                                              │ 247   │ 240   │
│ 33  │ 179     │ San Marino                                           │ 0     │ 0     │
│ 34  │ 228     │ Serbia                                               │ 55    │ 49    │
│ 35  │ 186     │ Slovakia                                             │ 4     │ 2     │
│ 36  │ 187     │ Slovenia                                             │ 18    │ 7     │
│ 37  │ 191     │ Spain                                                │ 1368  │ 1097  │
│ 38  │ 198     │ Switzerland                                          │ 145   │ 155   │
│ 39  │ 203     │ North Macedonia                                      │ 2     │ 6     │
│ 40  │ 214     │ Ukraine                                              │ 140   │ 621   │
│ 41  │ 216     │ United Kingdom of Great Britain and Northern Ireland │ 635   │ 671   │
41×4 DataFrame
│ Row │ Column1 │ country                                              │ 2009  │ 2010   │
│     │ Int64   │ String                                               │ Int64 │ Int64⍰ │
├─────┼─────────┼──────────────────────────────────────────────────────┼───────┼────────┤
│ 1   │ 2       │ Albania                                              │ 32    │ 24     │
│ 2   │ 5       │ Andorra                                              │ 0     │ 0      │
│ 3   │ 10      │ Armenia                                              │ 84    │ 94     │
│ 4   │ 13      │ Austria                                              │ 102   │ 94     │
│ 5   │ 14      │ Azerbaijan                                           │ 109   │ 210    │
│ 6   │ 19      │ Belarus                                              │ 500   │ 543    │
│ 7   │ 20      │ Belgium                                              │ 120   │ 88     │
│ 8   │ 26      │ Bosnia and Herzegovina                               │ 2     │ 6      │
│ 9   │ 31      │ Bulgaria                                             │ 30    │ 32     │
│ 10  │ 51      │ Croatia                                              │ 13    │ 19     │
│ 11  │ 54      │ Czech Republic                                       │ 23    │ 26     │
│ 12  │ 58      │ Denmark                                              │ 36    │ 44     │
│ 13  │ 67      │ Estonia                                              │ 38    │ 26     │
│ 14  │ 72      │ Finland                                              │ 21    │ 33     │
│ 15  │ 73      │ France                                               │ 931   │ 951    │
│ 16  │ 78      │ Georgia                                              │ 284   │ 339    │
│ 17  │ 79      │ Germany                                              │ 565   │ 421    │
│ 18  │ 82      │ Greece                                               │ 96    │ 100    │
│ 19  │ 94      │ Hungary                                              │ 23    │ 28     │
│ 20  │ 95      │ Iceland                                              │ 0     │ 1      │
│ 21  │ 100     │ Ireland                                              │ 35    │ 38     │
│ 22  │ 102     │ Italy                                                │ 1183  │ 1102   │
│ 23  │ 112     │ Latvia                                               │ 99    │ 130    │
│ 24  │ 118     │ Lithuania                                            │ 37    │ 33     │
│ 25  │ 119     │ Luxembourg                                           │ 3     │ 8      │
│ 26  │ 125     │ Malta                                                │ 1     │ 6      │
│ 27  │ 142     │ Netherlands                                          │ 262   │ 266    │
│ 28  │ 152     │ Norway                                               │ 18    │ 22     │
│ 29  │ 163     │ Poland                                               │ 127   │ 171    │
│ 30  │ 164     │ Portugal                                             │ 469   │ 474    │
│ 31  │ 168     │ Republic of Moldova                                  │ 262   │ 303    │
│ 32  │ 170     │ Romania                                              │ 247   │ 240    │
│ 33  │ 179     │ San Marino                                           │ 0     │ 0      │
│ 34  │ 228     │ Serbia                                               │ 55    │ 49     │
│ 35  │ 186     │ Slovakia                                             │ 4     │ 2      │
│ 36  │ 187     │ Slovenia                                             │ 18    │ 7      │
│ 37  │ 191     │ Spain                                                │ 1368  │ 1097   │
│ 38  │ 198     │ Switzerland                                          │ 145   │ 155    │
│ 39  │ 203     │ North Macedonia                                      │ 2     │ 6      │
│ 40  │ 214     │ Ukraine                                              │ 140   │ 621    │
│ 41  │ 216     │ United Kingdom of Great Britain and Northern Ireland │ 635   │ 671    │
#+end_example


** Duplicates

To find observations that are duplicated (or not) Julia has the functions "nonunique" (returns a Boolean vector indicating all rows that have earlier duplicates) and "unique" (returns Dataframe with unique rows only) as well as "unique!" (drops all duplicate rows from original df). One can give variables (or an Array of Variables) on which uniqueness ought to be checked.

#+name: duplicates
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using DataFrames

df = DataFrame(name = ["Alice", "Bob", "Carrol","Alice"], height = [169, 181, 171, 169], age = [20,26,20,20], weight = [60,70,68,60])

unique(df)

nonunique(df)

nonunique(df,:age) #checks for duplicates in variable age only

nonunique(df,[:age,:weight]) ##checks for duplicates in variable age and weight 

#+END_SRC

#+RESULTS: duplicates
#+begin_example
4×4 DataFrame
│ Row │ name   │ height │ age   │ weight │
│     │ String │ Int64  │ Int64 │ Int64  │
├─────┼────────┼────────┼───────┼────────┤
│ 1   │ Alice  │ 169    │ 20    │ 60     │
│ 2   │ Bob    │ 181    │ 26    │ 70     │
│ 3   │ Carrol │ 171    │ 20    │ 68     │
│ 4   │ Alice  │ 169    │ 20    │ 60     │
3×4 DataFrame
│ Row │ name   │ height │ age   │ weight │
│     │ String │ Int64  │ Int64 │ Int64  │
├─────┼────────┼────────┼───────┼────────┤
│ 1   │ Alice  │ 169    │ 20    │ 60     │
│ 2   │ Bob    │ 181    │ 26    │ 70     │
│ 3   │ Carrol │ 171    │ 20    │ 68     │
4-element Array{Bool,1}:
 0
 0
 0
 1
4-element Array{Bool,1}:
 0
 0
 1
 1
4-element Array{Bool,1}:
 0
 0
 0
 1
#+end_example

** Formatting the data 

*** reshaping

Data can be either in the wide format (e.g. each row corresponds to a name and column 1 refers to income in year 1, column 2 to income in year 2) or in long format (each row is one (time, income) pair). 

Going from wide to long format DataFrames.jl provides the "stack" function and to do the opposite one uses the "unstack" function. The syntax is "stack(DataFrame, variablesToStack)" or alternatively "stack(DataFrame,Not(variablesNotToStack))". For unstack one gives the dataframe as first argument, the id variable (e.g. name) that identifies all rows of the same observation unit in the long format as the second argument, then the variable column (that is is the variable name) and the value of the variable as last argument.

#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using DataFrames

df = DataFrame(name = ["Alice", "Bob","Carrol"], income2010 = [50, 60,70], income2015=[59,57,75])

dflong = stack(df,[:income2010,:income2015])

stack(df,Not(:name))

unstack(dflong,:name,:variable,:value)

#+END_SRC

#+RESULTS:
#+begin_example
3×3 DataFrame
│ Row │ name   │ income2010 │ income2015 │
│     │ String │ Int64      │ Int64      │
├─────┼────────┼────────────┼────────────┤
│ 1   │ Alice  │ 50         │ 59         │
│ 2   │ Bob    │ 60         │ 57         │
│ 3   │ Carrol │ 70         │ 75         │
6×3 DataFrame
│ Row │ variable   │ value │ name   │
│     │ Symbol     │ Int64 │ String │
├─────┼────────────┼───────┼────────┤
│ 1   │ income2010 │ 50    │ Alice  │
│ 2   │ income2010 │ 60    │ Bob    │
│ 3   │ income2010 │ 70    │ Carrol │
│ 4   │ income2015 │ 59    │ Alice  │
│ 5   │ income2015 │ 57    │ Bob    │
│ 6   │ income2015 │ 75    │ Carrol │
6×3 DataFrame
│ Row │ variable   │ value │ name   │
│     │ Symbol     │ Int64 │ String │
├─────┼────────────┼───────┼────────┤
│ 1   │ income2010 │ 50    │ Alice  │
│ 2   │ income2010 │ 60    │ Bob    │
│ 3   │ income2010 │ 70    │ Carrol │
│ 4   │ income2015 │ 59    │ Alice  │
│ 5   │ income2015 │ 57    │ Bob    │
│ 6   │ income2015 │ 75    │ Carrol │
3×3 DataFrame
│ Row │ name   │ income2010 │ income2015 │
│     │ String │ Int64⍰     │ Int64⍰     │
├─────┼────────┼────────────┼────────────┤
│ 1   │ Alice  │ 50         │ 59         │
│ 2   │ Bob    │ 60         │ 57         │
│ 3   │ Carrol │ 70         │ 75         │
#+end_example

*** renaming variables

To change the names of variables of a dataset one can use the "rename!" function.

#+name: rename
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using DataFrames

df = DataFrame(name = ["Alice", "Bob","Carrol"], income2010 = [50, 60,70], income2015=[59,57,75])

rename!(df,Dict(:income2010 => "Inc10",:income2015 => "Inc15"))

rename!(df,[:NAME,:INC10,:INC15])
#+END_SRC

#+RESULTS: rename
#+begin_example
3×3 DataFrame
│ Row │ name   │ income2010 │ income2015 │
│     │ String │ Int64      │ Int64      │
├─────┼────────┼────────────┼────────────┤
│ 1   │ Alice  │ 50         │ 59         │
│ 2   │ Bob    │ 60         │ 57         │
│ 3   │ Carrol │ 70         │ 75         │
3×3 DataFrame
│ Row │ name   │ Inc10 │ Inc15 │
│     │ String │ Int64 │ Int64 │
├─────┼────────┼───────┼───────┤
│ 1   │ Alice  │ 50    │ 59    │
│ 2   │ Bob    │ 60    │ 57    │
│ 3   │ Carrol │ 70    │ 75    │
3×3 DataFrame
│ Row │ NAME   │ INC10 │ INC15 │
│     │ String │ Int64 │ Int64 │
├─────┼────────┼───────┼───────┤
│ 1   │ Alice  │ 50    │ 59    │
│ 2   │ Bob    │ 60    │ 57    │
│ 3   │ Carrol │ 70    │ 75    │
#+end_example

* Exploring data
** Univariate descriptive statistics

#+name: descriptive1
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using CSV, DataFrames, Statistics

df = CSV.read("CISID_HIV.csv";header=1)

mean(df[:,Symbol("2009")])

mean(skipmissing(df[:,Symbol("2009")]))

describe(df)

#+END_SRC

#+RESULTS: descriptive1
#+begin_example
44×4 DataFrame
│ Row │ Column1 │ country                                              │ 2009    │ 2010    │
│     │ Int64   │ String                                               │ Int64⍰  │ Int64⍰  │
├─────┼─────────┼──────────────────────────────────────────────────────┼─────────┼─────────┤
│ 1   │ 2       │ Albania                                              │ 32      │ 24      │
│ 2   │ 5       │ Andorra                                              │ 0       │ 0       │
│ 3   │ 10      │ Armenia                                              │ 84      │ 94      │
│ 4   │ 13      │ Austria                                              │ 102     │ 94      │
│ 5   │ 14      │ Azerbaijan                                           │ 109     │ 210     │
│ 6   │ 19      │ Belarus                                              │ 500     │ 543     │
│ 7   │ 20      │ Belgium                                              │ 120     │ 88      │
│ 8   │ 26      │ Bosnia and Herzegovina                               │ 2       │ 6       │
│ 9   │ 31      │ Bulgaria                                             │ 30      │ 32      │
│ 10  │ 51      │ Croatia                                              │ 13      │ 19      │
│ 11  │ 54      │ Czech Republic                                       │ 23      │ 26      │
│ 12  │ 58      │ Denmark                                              │ 36      │ 44      │
│ 13  │ 67      │ Estonia                                              │ 38      │ 26      │
│ 14  │ 72      │ Finland                                              │ 21      │ 33      │
│ 15  │ 73      │ France                                               │ 931     │ 951     │
│ 16  │ 78      │ Georgia                                              │ 284     │ 339     │
│ 17  │ 79      │ Germany                                              │ 565     │ 421     │
│ 18  │ 82      │ Greece                                               │ 96      │ 100     │
│ 19  │ 94      │ Hungary                                              │ 23      │ 28      │
│ 20  │ 95      │ Iceland                                              │ 0       │ 1       │
│ 21  │ 100     │ Ireland                                              │ 35      │ 38      │
│ 22  │ 102     │ Italy                                                │ 1183    │ 1102    │
│ 23  │ 112     │ Latvia                                               │ 99      │ 130     │
│ 24  │ 118     │ Lithuania                                            │ 37      │ 33      │
│ 25  │ 119     │ Luxembourg                                           │ 3       │ 8       │
│ 26  │ 125     │ Malta                                                │ 1       │ 6       │
│ 27  │ 133     │ Monaco                                               │ missing │ missing │
│ 28  │ 142     │ Netherlands                                          │ 262     │ 266     │
│ 29  │ 152     │ Norway                                               │ 18      │ 22      │
│ 30  │ 163     │ Poland                                               │ 127     │ 171     │
│ 31  │ 164     │ Portugal                                             │ 469     │ 474     │
│ 32  │ 168     │ Republic of Moldova                                  │ 262     │ 303     │
│ 33  │ 170     │ Romania                                              │ 247     │ 240     │
│ 34  │ 171     │ Russian Federation                                   │ missing │ missing │
│ 35  │ 179     │ San Marino                                           │ 0       │ 0       │
│ 36  │ 228     │ Serbia                                               │ 55      │ 49      │
│ 37  │ 186     │ Slovakia                                             │ 4       │ 2       │
│ 38  │ 187     │ Slovenia                                             │ 18      │ 7       │
│ 39  │ 191     │ Spain                                                │ 1368    │ 1097    │
│ 40  │ 197     │ Sweden                                               │ missing │ missing │
│ 41  │ 198     │ Switzerland                                          │ 145     │ 155     │
│ 42  │ 203     │ North Macedonia                                      │ 2       │ 6       │
│ 43  │ 214     │ Ukraine                                              │ 140     │ 621     │
│ 44  │ 216     │ United Kingdom of Great Britain and Northern Ireland │ 635     │ 671     │
missing
198.02439024390245
4×8 DataFrame
│ Row │ variable │ mean    │ min     │ median │ max                                                  │ nunique │ nmissing │ eltype                │
│     │ Symbol   │ Union…  │ Any     │ Union… │ Any                                                  │ Union…  │ Union…   │ Type                  │
├─────┼──────────┼─────────┼─────────┼────────┼──────────────────────────────────────────────────────┼─────────┼──────────┼───────────────────────┤
│ 1   │ Column1  │ 110.932 │ 2       │ 107.0  │ 228                                                  │         │          │ Int64                 │
│ 2   │ country  │         │ Albania │        │ United Kingdom of Great Britain and Northern Ireland │ 44      │          │ String                │
│ 3   │ 2009     │ 198.024 │ 0       │ 55.0   │ 1368                                                 │         │ 3        │ Union{Missing, Int64} │
│ 4   │ 2010     │ 206.829 │ 0       │ 49.0   │ 1102                                                 │         │ 3        │ Union{Missing, Int64} │
#+end_example

The function "groupby" simply gives several sub dataframes -- one for each group. For example, "groupby(df,:age)" will create one sub dataframe for each age-group. This can be useful to get summary statistics by group, e.g. to answer the question "what is the average height of the 20 year old?". One computes the mean for each sub dataframe to get the answer (or simply looks at the summary statistics for each sub dataframe).

#+name: groupby
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 
  using DataFrames, Statistics
  
  df = DataFrame(name = ["Alice", "Bob","Carrol","Dave"], height=[160,180,171,169], age= [20, 26,20,26], weight=[60,70,68,64])

  groupby(df,:age);

  for group in groupby(df,:age)
      println(describe(group))
  end

#+END_SRC

#+RESULTS: groupby
#+begin_example
4×4 DataFrame
│ Row │ name   │ height │ age   │ weight │
│     │ String │ Int64  │ Int64 │ Int64  │
├─────┼────────┼────────┼───────┼────────┤
│ 1   │ Alice  │ 160    │ 20    │ 60     │
│ 2   │ Bob    │ 180    │ 26    │ 70     │
│ 3   │ Carrol │ 171    │ 20    │ 68     │
│ 4   │ Dave   │ 169    │ 26    │ 64     │

4×8 DataFrame
│ Row │ variable │ mean   │ min   │ median │ max    │ nunique │ nmissing │ eltype   │
│     │ Symbol   │ Union… │ Any   │ Union… │ Any    │ Union…  │ Nothing  │ DataType │
├─────┼──────────┼────────┼───────┼────────┼────────┼─────────┼──────────┼──────────┤
│ 1   │ name     │        │ Alice │        │ Carrol │ 2       │          │ String   │
│ 2   │ height   │ 165.5  │ 160   │ 165.5  │ 171    │         │          │ Int64    │
│ 3   │ age      │ 20.0   │ 20    │ 20.0   │ 20     │         │          │ Int64    │
│ 4   │ weight   │ 64.0   │ 60    │ 64.0   │ 68     │         │          │ Int64    │
4×8 DataFrame
│ Row │ variable │ mean   │ min │ median │ max  │ nunique │ nmissing │ eltype   │
│     │ Symbol   │ Union… │ Any │ Union… │ Any  │ Union…  │ Nothing  │ DataType │
├─────┼──────────┼────────┼─────┼────────┼──────┼─────────┼──────────┼──────────┤
│ 1   │ name     │        │ Bob │        │ Dave │ 2       │          │ String   │
│ 2   │ height   │ 174.5  │ 169 │ 174.5  │ 180  │         │          │ Int64    │
│ 3   │ age      │ 26.0   │ 26  │ 26.0   │ 26   │         │          │ Int64    │
│ 4   │ weight   │ 67.0   │ 64  │ 67.0   │ 70   │         │          │ Int64    │
#+end_example


Sometimes it can be useful to check for frequencies in the data. The function "countmap" is a simple version to see the number of occurences (to sue this function you have to load the StatsBase.jl package). The package FreqTables.jl provides support for multidimensional frequency tables. The "prop" function transforms number of occurences to proportions.

#+name: frequency
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 
  using DataFrames, Statistics, StatsBase

  df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave"], height =
  [160, 180, 171, 169], age = [20,26,20,26], weight = [60,70,68,64])

  countmap(df.age)

  proportionmap(df.age)

  using FreqTables

  freqtable(df,:age)

  freqtable(df,:age,:weight)

  prop(freqtable(df,:age))

  prop(freqtable(df,:age,:weight))

#+END_SRC

#+RESULTS: combine
#+begin_example
4×4 DataFrame
│ Row │ name   │ height │ age   │ weight │
│     │ String │ Int64  │ Int64 │ Int64  │
├─────┼────────┼────────┼───────┼────────┤
│ 1   │ Alice  │ 160    │ 20    │ 60     │
│ 2   │ Bob    │ 180    │ 26    │ 70     │
│ 3   │ Carrol │ 171    │ 20    │ 68     │
│ 4   │ Dave   │ 169    │ 26    │ 64     │
GroupedDataFrame with 2 groups based on key: age
Group 1 (2 rows): age = 20
│ Row │ name   │ height │ age   │ weight │
│     │ String │ Int64  │ Int64 │ Int64  │
├─────┼────────┼────────┼───────┼────────┤
│ 1   │ Alice  │ 160    │ 20    │ 60     │
│ 2   │ Carrol │ 171    │ 20    │ 68     │
Group 2 (2 rows): age = 26
│ Row │ name   │ height │ age   │ weight │
│     │ String │ Int64  │ Int64 │ Int64  │
├─────┼────────┼────────┼───────┼────────┤
│ 1   │ Bob    │ 180    │ 26    │ 70     │
│ 2   │ Dave   │ 169    │ 26    │ 64     │
2×2 DataFrame
│ Row │ age   │ weight_mean │
│     │ Int64 │ Float64     │
├─────┼───────┼─────────────┤
│ 1   │ 20    │ 64.0        │
│ 2   │ 26    │ 67.0        │
#+end_example

There is also an option of fitting histograms to the data (this is in some sense a sort of generalized frequency table). We will come back to plotting these histograms later and only briefly mention how to use the "fit(Histogram, data)" command to generate something like a frequency table.

#+name: frequencyHisto
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 
using DataFrames, Statistics, StatsBase

df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave"], height = [160, 180, 171, 169], age = [20,26,20,26], weight = [60,70,68,64])

fit(Histogram,df.age)

fit(Histogram,df.age,nbins=2)

fit(Histogram,df.age,edges=[0,20,24,26,30]) #provides the edges for the bins in left-closed, right-open format

fit(Histogram,(df.age,df.weight)) #multidimension histograms are supported as well

#+END_SRC


** Using DataFramesMeta

The package DataFramesMeta.jl provides some macros that allow to do some of the above mentioned operations in an easier (to read) way. Note that variables are here always referenced with :variablename. In the examples below I use ".==" for conditions. This will only work if there are no missing values. In order to do such selections and exclude missing values, use "isequal.(:age,20)" instead of ":age.==20".

|------------+---------------------------------------------------|
| macro      | explanation                                       |
|------------+---------------------------------------------------|
| @where     | select rows where the condition is met            |
| @select    | select columns (possibly newly generated columns) |
| @byrow!    | works on a data frame row by row                  |
| @transform | add aditional columns by transforming old ones    |


#+name: dfmeta1
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using DataFrames, Statistics, DataFramesMeta

df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave"], height = [160, 180, 171, 169], age = [20,26,20,26])

@where(df,:age.==20)

@where(df,:age.==20,:height.>160)

@select(df, heightMeter = :height./100,:age)

@byrow! df if :age.>22; println("another oldie") end #note that no "." in comparison as row by row

@transform(df, heightMeter = :height./100)

#+END_SRC

#+RESULTS: dfmeta1
#+begin_example
4×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Alice  │ 160    │ 20    │
│ 2   │ Bob    │ 180    │ 26    │
│ 3   │ Carrol │ 171    │ 20    │
│ 4   │ Dave   │ 169    │ 26    │
2×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Alice  │ 160    │ 20    │
│ 2   │ Carrol │ 171    │ 20    │
1×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Carrol │ 171    │ 20    │
4×2 DataFrame
│ Row │ heightMeter │ age   │
│     │ Float64     │ Int64 │
├─────┼─────────────┼───────┤
│ 1   │ 1.6         │ 20    │
│ 2   │ 1.8         │ 26    │
│ 3   │ 1.71        │ 20    │
│ 4   │ 1.69        │ 26    │
another oldie
another oldie
4×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Alice  │ 160    │ 20    │
│ 2   │ Bob    │ 180    │ 26    │
│ 3   │ Carrol │ 171    │ 20    │
│ 4   │ Dave   │ 169    │ 26    │
4×4 DataFrame
│ Row │ name   │ height │ age   │ heightMeter │
│     │ String │ Int64  │ Int64 │ Float64     │
├─────┼────────┼────────┼───────┼─────────────┤
│ 1   │ Alice  │ 160    │ 20    │ 1.6         │
│ 2   │ Bob    │ 180    │ 26    │ 1.8         │
│ 3   │ Carrol │ 171    │ 20    │ 1.71        │
│ 4   │ Dave   │ 169    │ 26    │ 1.69        │
#+end_example


Another highlight of the DataFramesMeta.jl package is the option of "piping", i.e. chaining several operations, using the "@linq" macro.

#+name: dfmeta2
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output
using DataFrames, Statistics, DataFramesMeta

df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave","Eve"], height = [160, 180, 171, 169,163], age = [20,26,20,26,20])

@linq df |>
    transform(heightMeter = :height./100) |> #creates variable height in meters
    where(:height .> 161) |> #selects only people with height >161
    by(:age,  meanHeightMeter = mean(:heightMeter), sizeRange = maximum(:heightMeter)-minimum(:heightMeter)) |> #computes average height in m by age groups and the range of heights in every age group
    orderby(:meanHeightMeter) |> #orders by average height of age groups
    select(:age,:sizeRange) #selects only the age and sizeRange variables (in the above order)

#+END_SRC

#+RESULTS: dfmeta2
#+begin_example
5×3 DataFrame
│ Row │ name   │ height │ age   │
│     │ String │ Int64  │ Int64 │
├─────┼────────┼────────┼───────┤
│ 1   │ Alice  │ 160    │ 20    │
│ 2   │ Bob    │ 180    │ 26    │
│ 3   │ Carrol │ 171    │ 20    │
│ 4   │ Dave   │ 169    │ 26    │
│ 5   │ Eve    │ 163    │ 20    │
2×2 DataFrame
│ Row │ age   │ sizeRange │
│     │ Int64 │ Float64   │
├─────┼───────┼───────────┤
│ 1   │ 20    │ 0.08      │
│ 2   │ 26    │ 0.11      │
#+end_example

The DataFramesMeta.jl package has also some functionality for GroupedDataFrames (e.g. the type "groupby(df,:age)" returns). Interesting is indexing into subgroups by g[1] for the first subgroup or g[ [1,4,5] ] for subgroups 1,4 and 5. also "where", "orderby" and "transform" work on subgroups.

** Multivariate descriptive statistics

The "cor" function computes the Pearson correlation coefficient between two vectors or between all columns of a matrix. (Unfortunately, it does not work on a DataFrame directly.)

#+name: cor
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 
using DataFrames, Statistics

df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave"], height = [160, 180, 171, 169], age = [20,26,20,26], weight = [60,70,68,64])

cor(df.age,df.height)

cor(hcat(df.age,df.weight,df.height))
#+END_SRC

#+RESULTS: cor
#+begin_example
6×4 DataFrame
│ Row │ name   │ height │ age   │ weight │
│     │ String │ Int64  │ Int64 │ Int64  │
├─────┼────────┼────────┼───────┼────────┤
│ 1   │ Alice  │ 160    │ 20    │ 50     │
│ 2   │ Bob    │ 180    │ 26    │ 91     │
│ 3   │ Carrol │ 171    │ 20    │ 70     │
│ 4   │ Dave   │ 169    │ 26    │ 65     │
│ 5   │ Eve    │ 150    │ 26    │ 45     │
│ 6   │ Fred   │ 191    │ 20    │ 80     │

#+end_example

The "cor" function unfortunately rather limited as it does not only not work on Dataframes but also cannot handle missing values. For this reason, I wrote a little function "cordf" that computes the correlation matrix of all numerical variables of a Dataframe excluding missing values in the computation of the pairwise correlation coefficients.

#+name: cor2
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 
using DataFrames, Statistics

df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave"], height = [missing, 180, 171, 169], age = [20,26,20,26], weight = [60,70,68,64])

function cordf(df) # compute correlation matrix for numerical variables in dataset excluding missing values
    numVars = names(df[(<:).(eltype.(eachcol(df)),Union{Number,Missing}).&(eltype.(eachcol(df)).!=Missing)])
    n = length(numVars)
    dfOut = DataFrame(variables = numVars)
    for (i,iname) in enumerate(numVars)
        newcol = eval(:(DataFrame($iname = ones($n))))
        dfOut = hcat(dfOut,newcol)
        for (j,jname) in enumerate(numVars[i+1:end])
            mask = .!(ismissing.(df[:,iname]) .| ismissing.(df[:,jname]))
            dfOut[j+i,iname] = cor(df[mask,iname], df[mask,jname])
        end
    end
    for i in 2:n
        for j in 1:i
            dfOut[j,i+1] = dfOut[i,j+1]
        end
    end
    return dfOut
end

cordf(df)

#+END_SRC

#+RESULTS: cor2
#+begin_example
4×4 DataFrame
│ Row │ name   │ height  │ age   │ weight │
│     │ String │ Int64⍰  │ Int64 │ Int64  │
├─────┼────────┼─────────┼───────┼────────┤
│ 1   │ Alice  │ missing │ 20    │ 60     │
│ 2   │ Bob    │ 180     │ 26    │ 70     │
│ 3   │ Carrol │ 171     │ 20    │ 68     │
│ 4   │ Dave   │ 169     │ 26    │ 64     │
cordf (generic function with 1 method)
3×4 DataFrame
│ Row │ variables │ height   │ age      │ weight   │
│     │ Symbol    │ Float64  │ Float64  │ Float64  │
├─────┼───────────┼──────────┼──────────┼──────────┤
│ 1   │ height    │ 1.0      │ 0.344865 │ 0.856565 │
│ 2   │ age       │ 0.344865 │ 1.0      │ 0.390567 │
│ 3   │ weight    │ 0.856565 │ 0.390567 │ 1.0      │
#+end_example



    

* Plotting data
Plotting functions and the basics of the Plots.jl package are discussed [[https://github.com/schottmueller/juliaForMicroTheory/blob/master/1.%20Plotting%20a%20function.ipynb][here]]. A basic principle of Plots.jl is that the data is entered directly while everything else (how the plot looks like, labels etc.) is entered as keyword argument.

Now I will focus on the options the package StatsPlots.jl gives for data. To plot from dataframes as data source (instead of vectors or matrices), one needs the "@df" macro. When one writes "@df df..." one can use the column names of df as if they were names of vectors in this line.

** Scatterplot

We start with a scatterplot where data points are colored according to age groups.

#+name: groupedscatter
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots

df = DataFrame(name = ["Alice", "Bob", "Carrol","Dave","Eve","Fred"], height = [160, 180, 171, 169,150,191], age = [20,26,20,26,26,20], weight = [50,91,70,65,45,80])

p = @df df scatter(:height,:weight,group = :age,xlabel="height in cm",ylabel ="weight in kg", title = "Height/Weight Distribution")

savefig(p,"./groupedscatter.png")

display(p)
#+END_SRC

#+RESULTS: groupedscatter
#+begin_example
6×4 DataFrame
│ Row │ name   │ height │ age   │ weight │
│     │ String │ Int64  │ Int64 │ Int64  │
├─────┼────────┼────────┼───────┼────────┤
│ 1   │ Alice  │ 160    │ 20    │ 50     │
│ 2   │ Bob    │ 180    │ 26    │ 91     │
│ 3   │ Carrol │ 171    │ 20    │ 70     │
│ 4   │ Dave   │ 169    │ 26    │ 65     │
│ 5   │ Eve    │ 150    │ 26    │ 45     │
│ 6   │ Fred   │ 191    │ 20    │ 80     │

#+end_example

[[./groupedscatter.png]]


** Histogram
A common type of visualizing data is a histogram that shows the empirical distribution of a variable.
#+name: hist
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots

df = DataFrame(x = 1:71,y=vcat(collect(11:50),collect(60:90)).+ 10*rand(71));

@df df histogram(:y,bins=:scott,normed=true,alpha=0.6)

savefig("./histo.png")
#+END_SRC

#+RESULTS: hist
#+begin_example
71×2 DataFrame
│ Row │ x     │ y       │
│     │ Int64 │ Float64 │
├─────┼───────┼─────────┤
│ 1   │ 1     │ 12.0725 │
│ 2   │ 2     │ 13.5524 │
│ 3   │ 3     │ 16.1624 │
│ 4   │ 4     │ 14.3274 │
│ 5   │ 5     │ 15.471  │
│ 6   │ 6     │ 18.0051 │
│ 7   │ 7     │ 17.212  │
│ 8   │ 8     │ 20.6041 │
│ 9   │ 9     │ 28.7572 │
│ 10  │ 10    │ 23.2649 │
│ 11  │ 11    │ 27.2588 │
│ 12  │ 12    │ 27.8535 │
│ 13  │ 13    │ 26.0537 │
│ 14  │ 14    │ 29.2992 │
│ 15  │ 15    │ 33.0303 │
│ 16  │ 16    │ 30.5696 │
│ 17  │ 17    │ 34.4693 │
│ 18  │ 18    │ 29.8123 │
│ 19  │ 19    │ 33.3407 │
│ 20  │ 20    │ 33.4568 │
│ 21  │ 21    │ 34.9741 │
│ 22  │ 22    │ 39.2022 │
│ 23  │ 23    │ 34.679  │
│ 24  │ 24    │ 35.7175 │
│ 25  │ 25    │ 38.1043 │
│ 26  │ 26    │ 41.7799 │
│ 27  │ 27    │ 46.867  │
│ 28  │ 28    │ 39.0401 │
│ 29  │ 29    │ 40.2276 │
│ 30  │ 30    │ 41.6761 │
│ 31  │ 31    │ 46.0517 │
│ 32  │ 32    │ 43.4391 │
│ 33  │ 33    │ 48.3298 │
│ 34  │ 34    │ 49.9075 │
│ 35  │ 35    │ 54.412  │
│ 36  │ 36    │ 46.0659 │
│ 37  │ 37    │ 55.2275 │
│ 38  │ 38    │ 53.0445 │
│ 39  │ 39    │ 54.3078 │
│ 40  │ 40    │ 59.1198 │
│ 41  │ 41    │ 64.801  │
│ 42  │ 42    │ 61.3979 │
│ 43  │ 43    │ 65.7227 │
│ 44  │ 44    │ 72.1202 │
│ 45  │ 45    │ 69.658  │
│ 46  │ 46    │ 73.2446 │
│ 47  │ 47    │ 75.7188 │
│ 48  │ 48    │ 68.4624 │
│ 49  │ 49    │ 76.7488 │
│ 50  │ 50    │ 72.242  │
│ 51  │ 51    │ 73.6135 │
│ 52  │ 52    │ 79.9966 │
│ 53  │ 53    │ 80.8195 │
│ 54  │ 54    │ 78.8509 │
│ 55  │ 55    │ 79.9976 │
│ 56  │ 56    │ 82.2524 │
│ 57  │ 57    │ 83.9222 │
│ 58  │ 58    │ 86.4357 │
│ 59  │ 59    │ 87.2226 │
│ 60  │ 60    │ 84.0991 │
│ 61  │ 61    │ 80.0172 │
│ 62  │ 62    │ 90.82   │
│ 63  │ 63    │ 84.1279 │
│ 64  │ 64    │ 92.008  │
│ 65  │ 65    │ 86.7661 │
│ 66  │ 66    │ 93.7893 │
│ 67  │ 67    │ 91.4124 │
│ 68  │ 68    │ 88.6194 │
│ 69  │ 69    │ 97.7861 │
│ 70  │ 70    │ 92.6524 │
│ 71  │ 71    │ 98.5728 │

#+end_example

[[./histo.png]]

One can also plot histograms of the marginal distributions in addition to a plot indicating the two dimensional distribution.
#+name: marginalhist
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots

df = DataFrame(x = vcat(collect(1:40),collect(70:100)),y=vcat(collect(11:50),collect(60:90)).+ 10*rand(71));

p = @df df marginalhist(:x,:y)

savefig(p,"./marghist.png")

display(p)
#+END_SRC

#+RESULTS: marginalhist
#+begin_example
71×2 DataFrame
│ Row │ x     │ y       │
│     │ Int64 │ Float64 │
├─────┼───────┼─────────┤
│ 1   │ 1     │ 13.1669 │
│ 2   │ 2     │ 19.1609 │
│ 3   │ 3     │ 13.2385 │
│ 4   │ 4     │ 20.6108 │
│ 5   │ 5     │ 22.3414 │
│ 6   │ 6     │ 16.5816 │
│ 7   │ 7     │ 25.9234 │
│ 8   │ 8     │ 26.693  │
│ 9   │ 9     │ 27.6766 │
│ 10  │ 10    │ 29.761  │
│ 11  │ 11    │ 29.7549 │
│ 12  │ 12    │ 31.7431 │
│ 13  │ 13    │ 23.1295 │
│ 14  │ 14    │ 33.2671 │
│ 15  │ 15    │ 34.1527 │
│ 16  │ 16    │ 33.1092 │
│ 17  │ 17    │ 28.789  │
│ 18  │ 18    │ 35.3302 │
│ 19  │ 19    │ 32.2461 │
│ 20  │ 20    │ 36.1078 │
│ 21  │ 21    │ 31.3264 │
│ 22  │ 22    │ 41.7101 │
│ 23  │ 23    │ 34.3103 │
│ 24  │ 24    │ 37.212  │
│ 25  │ 25    │ 42.8175 │
│ 26  │ 26    │ 45.7746 │
│ 27  │ 27    │ 44.7893 │
│ 28  │ 28    │ 47.7838 │
│ 29  │ 29    │ 45.2497 │
│ 30  │ 30    │ 41.654  │
│ 31  │ 31    │ 42.4557 │
│ 32  │ 32    │ 48.4164 │
│ 33  │ 33    │ 52.603  │
│ 34  │ 34    │ 46.0973 │
│ 35  │ 35    │ 53.3539 │
│ 36  │ 36    │ 53.1461 │
│ 37  │ 37    │ 50.928  │
│ 38  │ 38    │ 51.588  │
│ 39  │ 39    │ 49.075  │
│ 40  │ 40    │ 57.8362 │
│ 41  │ 70    │ 68.1378 │
│ 42  │ 71    │ 67.9371 │
│ 43  │ 72    │ 71.6322 │
│ 44  │ 73    │ 72.0339 │
│ 45  │ 74    │ 69.4646 │
│ 46  │ 75    │ 66.8116 │
│ 47  │ 76    │ 75.0704 │
│ 48  │ 77    │ 74.3856 │
│ 49  │ 78    │ 76.8654 │
│ 50  │ 79    │ 78.6776 │
│ 51  │ 80    │ 70.8644 │
│ 52  │ 81    │ 77.1928 │
│ 53  │ 82    │ 73.755  │
│ 54  │ 83    │ 76.3807 │
│ 55  │ 84    │ 78.6493 │
│ 56  │ 85    │ 83.1083 │
│ 57  │ 86    │ 85.0598 │
│ 58  │ 87    │ 83.2476 │
│ 59  │ 88    │ 83.943  │
│ 60  │ 89    │ 83.6358 │
│ 61  │ 90    │ 85.0133 │
│ 62  │ 91    │ 82.363  │
│ 63  │ 92    │ 90.1495 │
│ 64  │ 93    │ 83.3277 │
│ 65  │ 94    │ 90.9027 │
│ 66  │ 95    │ 89.9453 │
│ 67  │ 96    │ 93.2213 │
│ 68  │ 97    │ 88.231  │
│ 69  │ 98    │ 91.5389 │
│ 70  │ 99    │ 98.2672 │
│ 71  │ 100   │ 98.0245 │

#+end_example
[[./marghist.png]]

Related to histograms is the "density" command that does not plot number of occurences but by default directly norms the distribution such that it integrates to 1.

#+name: densityplot
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots

Plots.pyplot()

df= DataFrame(x = 1:100, y= randn(100));
@df df density(:y)
savefig("./density.png")
#+END_SRC

#+RESULTS: densityplot
#+begin_example
Plots.PyPlotBackend()
100×2 DataFrame
│ Row │ x     │ y          │
│     │ Int64 │ Float64    │
├─────┼───────┼────────────┤
│ 1   │ 1     │ 0.993861   │
│ 2   │ 2     │ 0.237993   │
│ 3   │ 3     │ -0.531616  │
│ 4   │ 4     │ -0.908098  │
│ 5   │ 5     │ -0.732519  │
│ 6   │ 6     │ -0.646603  │
│ 7   │ 7     │ 1.60742    │
│ 8   │ 8     │ 1.1582     │
│ 9   │ 9     │ 0.977433   │
│ 10  │ 10    │ 0.880369   │
│ 11  │ 11    │ 0.438025   │
│ 12  │ 12    │ 0.600595   │
│ 13  │ 13    │ 0.350968   │
│ 14  │ 14    │ -0.808938  │
│ 15  │ 15    │ 0.650838   │
│ 16  │ 16    │ 0.766186   │
│ 17  │ 17    │ 0.895358   │
│ 18  │ 18    │ 0.156377   │
│ 19  │ 19    │ -0.951618  │
│ 20  │ 20    │ -0.097686  │
│ 21  │ 21    │ -0.0109116 │
│ 22  │ 22    │ 1.39001    │
│ 23  │ 23    │ 0.0409976  │
│ 24  │ 24    │ 0.742954   │
│ 25  │ 25    │ -0.0976739 │
│ 26  │ 26    │ 0.053653   │
│ 27  │ 27    │ 0.495604   │
│ 28  │ 28    │ -0.0534192 │
│ 29  │ 29    │ -1.98857   │
│ 30  │ 30    │ 0.185168   │
│ 31  │ 31    │ -0.428569  │
│ 32  │ 32    │ 0.321609   │
│ 33  │ 33    │ 2.01183    │
│ 34  │ 34    │ 0.553222   │
│ 35  │ 35    │ 0.507202   │
│ 36  │ 36    │ 0.343757   │
│ 37  │ 37    │ 1.05087    │
│ 38  │ 38    │ -1.86725   │
│ 39  │ 39    │ 0.789425   │
│ 40  │ 40    │ -0.192481  │
│ 41  │ 41    │ 0.759752   │
│ 42  │ 42    │ 0.0232146  │
│ 43  │ 43    │ 1.16713    │
│ 44  │ 44    │ 0.977781   │
│ 45  │ 45    │ -0.907069  │
│ 46  │ 46    │ 0.643568   │
│ 47  │ 47    │ 1.15952    │
│ 48  │ 48    │ -0.12903   │
│ 49  │ 49    │ 0.306534   │
│ 50  │ 50    │ -1.77833   │
│ 51  │ 51    │ 1.28642    │
│ 52  │ 52    │ 1.0414     │
│ 53  │ 53    │ -0.0530555 │
│ 54  │ 54    │ 0.110526   │
│ 55  │ 55    │ -0.890279  │
│ 56  │ 56    │ 0.185567   │
│ 57  │ 57    │ -2.1161    │
│ 58  │ 58    │ 0.0178672  │
│ 59  │ 59    │ 0.747888   │
│ 60  │ 60    │ 0.29922    │
│ 61  │ 61    │ -0.265337  │
│ 62  │ 62    │ 0.386067   │
│ 63  │ 63    │ -0.165296  │
│ 64  │ 64    │ 1.45479    │
│ 65  │ 65    │ 0.0666089  │
│ 66  │ 66    │ -1.36062   │
│ 67  │ 67    │ -0.275904  │
│ 68  │ 68    │ -1.27251   │
│ 69  │ 69    │ 0.213521   │
│ 70  │ 70    │ -0.402043  │
│ 71  │ 71    │ 0.756835   │
│ 72  │ 72    │ -0.980481  │
│ 73  │ 73    │ 1.00145    │
│ 74  │ 74    │ -0.130662  │
│ 75  │ 75    │ -1.1283    │
│ 76  │ 76    │ -0.659676  │
│ 77  │ 77    │ -1.1442    │
│ 78  │ 78    │ -1.10905   │
│ 79  │ 79    │ -1.21491   │
│ 80  │ 80    │ 0.162741   │
│ 81  │ 81    │ -1.1266    │
│ 82  │ 82    │ 0.569822   │
│ 83  │ 83    │ 0.48596    │
│ 84  │ 84    │ -2.18957   │
│ 85  │ 85    │ 0.100422   │
│ 86  │ 86    │ 0.032885   │
│ 87  │ 87    │ 0.78857    │
│ 88  │ 88    │ -0.69154   │
│ 89  │ 89    │ 0.426179   │
│ 90  │ 90    │ 1.11857    │
│ 91  │ 91    │ 0.125864   │
│ 92  │ 92    │ 0.581496   │
│ 93  │ 93    │ 0.533995   │
│ 94  │ 94    │ 0.251034   │
│ 95  │ 95    │ 1.9257     │
│ 96  │ 96    │ 0.101792   │
│ 97  │ 97    │ -1.21576   │
│ 98  │ 98    │ -0.627951  │
│ 99  │ 99    │ -0.77808   │
│ 100 │ 100   │ 1.62455    │

#+end_example
[[./density.png]]

** Distributions

Via the Distributions.jl package one can plot various distribution functions. Here we also see the feature that one can add plots to an existing plot by using the "!" at the end of the plotting command.

#+name: distplot
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots, Distributions

Plots.pyplot()

dist = Normal(.5,.6)
plot(dist,func=pdf,fill=(0, .5,:orange),label="pdf") #fill from 0 to pdf of dist with fillalpha 0.5 and color orange
plot!(dist, func=cdf,color=:blue,label="cdf")
savefig("./distplot.png")
#+END_SRC

#+RESULTS: distplot
: Plots.PyPlotBackend()
: Normal{Float64}(μ=0.5, σ=0.6)
: 
: 

[[./distplot.png]]

** Correlation plots
A very nice tool for data exploration is a correlation plot. This plots for any two variables in the dataset a scatterplot of these two variables with a best fit line and gives therefore a visual idea of all the pariwise correlations in the dataset (pro hint: the dot colors in the scatter plot indicate the correlation; with default colors:  positive correlations are blue, neutral are yellow and negative are red). On the main diagonal one gets the histograms for each variable. In the upper right triangle, 2d histograms are shown. The command is "corrplot". The argument specifies which columns of the dataset are used, e.g. cols(1:3) for the first 3 or [:x,:y] for variables x and y.

#+name: corrplot
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots
df  = DataFrame(x = .8*rand(100).+0.2*collect(1:100), y = randn(100), z = collect(1:100).+5*randn(100))

#@df df corrplot(cols(1:3),grid=false) # currently broken
Plots.pyplot()
corrplot(hcat(df.x,df.y,df.z))
savefig("./corrplot.png")
#+END_SRC

#+RESULTS: corrplot
#+begin_example
100×3 DataFrame
│ Row │ x        │ y          │ z        │
│     │ Float64  │ Float64    │ Float64  │
├─────┼──────────┼────────────┼──────────┤
│ 1   │ 0.687321 │ 0.788786   │ -5.81621 │
│ 2   │ 0.828621 │ -0.0287541 │ 1.52488  │
│ 3   │ 1.23986  │ 1.25208    │ 1.58084  │
│ 4   │ 1.29631  │ 0.696218   │ -3.32007 │
│ 5   │ 1.50445  │ 0.3193     │ 3.67313  │
│ 6   │ 1.25041  │ -0.0397613 │ -7.41272 │
│ 7   │ 1.84311  │ -0.135971  │ 4.61533  │
│ 8   │ 2.35843  │ -0.389646  │ 9.07822  │
│ 9   │ 2.45493  │ 0.544087   │ 14.0993  │
│ 10  │ 2.44463  │ -0.203694  │ 11.6908  │
│ 11  │ 2.85291  │ -0.50798   │ 9.54801  │
│ 12  │ 2.73477  │ -0.128666  │ 9.31715  │
│ 13  │ 3.12469  │ 0.39946    │ 16.7273  │
│ 14  │ 2.86043  │ -0.6035    │ 8.27923  │
│ 15  │ 3.25309  │ 0.84515    │ 17.0355  │
│ 16  │ 3.79785  │ -1.26733   │ 8.27015  │
│ 17  │ 4.19464  │ 0.787241   │ 21.9611  │
│ 18  │ 4.1123   │ 0.517434   │ 11.105   │
│ 19  │ 4.31955  │ 0.0959863  │ 17.6208  │
│ 20  │ 4.69026  │ -0.330759  │ 33.386   │
│ 21  │ 4.8963   │ -0.231333  │ 22.6939  │
│ 22  │ 4.42501  │ 0.292984   │ 24.6604  │
│ 23  │ 4.76916  │ -1.52746   │ 18.3534  │
│ 24  │ 5.32398  │ -0.999217  │ 27.9443  │
│ 25  │ 5.36619  │ 0.554131   │ 24.7747  │
│ 26  │ 5.83669  │ -0.0943971 │ 20.8052  │
│ 27  │ 5.65133  │ 1.28955    │ 27.1504  │
│ 28  │ 6.18667  │ 0.934956   │ 33.1871  │
│ 29  │ 6.31087  │ 0.0625749  │ 24.8957  │
│ 30  │ 6.63968  │ -2.00559   │ 32.4524  │
│ 31  │ 6.45696  │ -1.63862   │ 23.7709  │
│ 32  │ 6.43956  │ -0.971131  │ 33.0671  │
│ 33  │ 6.83689  │ 1.35186    │ 32.8384  │
│ 34  │ 7.43625  │ 0.699828   │ 29.992   │
│ 35  │ 7.075    │ -0.954655  │ 33.3813  │
│ 36  │ 7.4658   │ 0.638834   │ 34.7105  │
│ 37  │ 7.75053  │ -1.50053   │ 35.4982  │
│ 38  │ 7.96232  │ -0.159874  │ 42.226   │
│ 39  │ 8.52502  │ 0.264997   │ 34.5458  │
│ 40  │ 8.1559   │ -0.663632  │ 38.553   │
│ 41  │ 8.76247  │ 1.39033    │ 47.011   │
│ 42  │ 8.7946   │ 0.406969   │ 33.6306  │
│ 43  │ 9.34335  │ 0.934402   │ 55.3789  │
│ 44  │ 9.15445  │ -1.00658   │ 34.8851  │
│ 45  │ 9.56322  │ -1.20257   │ 38.1603  │
│ 46  │ 9.77394  │ 1.24952    │ 45.7372  │
│ 47  │ 10.1287  │ -1.49665   │ 44.9459  │
│ 48  │ 9.79374  │ 0.236618   │ 49.4466  │
│ 49  │ 10.4277  │ 0.478282   │ 41.3748  │
│ 50  │ 10.3334  │ 0.425576   │ 46.7266  │
│ 51  │ 10.9658  │ -1.45664   │ 49.7666  │
│ 52  │ 10.5497  │ 0.0676619  │ 47.979   │
│ 53  │ 10.706   │ -0.25579   │ 56.7514  │
│ 54  │ 11.4583  │ -0.308617  │ 49.086   │
│ 55  │ 11.2573  │ 0.830341   │ 50.3486  │
│ 56  │ 11.616   │ -1.03851   │ 53.4505  │
│ 57  │ 11.6429  │ 1.04185    │ 49.5211  │
│ 58  │ 11.7956  │ -2.48549   │ 55.5752  │
│ 59  │ 12.4118  │ 0.669636   │ 55.3554  │
│ 60  │ 12.7179  │ 0.147002   │ 63.1345  │
│ 61  │ 12.4556  │ -0.435193  │ 63.3837  │
│ 62  │ 13.0326  │ -0.471253  │ 60.2695  │
│ 63  │ 12.7897  │ 0.00613316 │ 57.3526  │
│ 64  │ 13.1776  │ -1.49704   │ 61.4019  │
│ 65  │ 13.6941  │ 0.606815   │ 61.7571  │
│ 66  │ 13.3407  │ -0.166363  │ 55.5341  │
│ 67  │ 14.0024  │ 1.30335    │ 64.9483  │
│ 68  │ 13.7923  │ 0.0597844  │ 73.4905  │
│ 69  │ 14.3034  │ 0.122272   │ 78.332   │
│ 70  │ 14.0743  │ -0.476875  │ 71.0289  │
│ 71  │ 14.8863  │ 0.188671   │ 71.5471  │
│ 72  │ 14.4725  │ -0.072316  │ 69.8402  │
│ 73  │ 14.7042  │ 0.579332   │ 66.1032  │
│ 74  │ 15.1713  │ 0.692715   │ 69.4087  │
│ 75  │ 15.2384  │ 0.0394567  │ 68.8696  │
│ 76  │ 15.4917  │ -0.881464  │ 74.8596  │
│ 77  │ 15.9802  │ -2.09474   │ 79.0106  │
│ 78  │ 15.7499  │ 0.417463   │ 79.9663  │
│ 79  │ 16.2116  │ 1.60247    │ 81.0659  │
│ 80  │ 16.1578  │ -0.447191  │ 81.3905  │
│ 81  │ 16.9246  │ 0.554637   │ 78.0882  │
│ 82  │ 16.7891  │ 0.863177   │ 84.3996  │
│ 83  │ 17.2311  │ -0.0981532 │ 78.516   │
│ 84  │ 16.8816  │ -0.0399725 │ 79.0807  │
│ 85  │ 17.1051  │ 0.225357   │ 80.2273  │
│ 86  │ 17.3997  │ 0.123424   │ 81.8532  │
│ 87  │ 17.7012  │ 0.24897    │ 84.9965  │
│ 88  │ 17.6039  │ -0.721472  │ 85.1786  │
│ 89  │ 18.3662  │ -0.018489  │ 93.0928  │
│ 90  │ 18.4794  │ 1.00469    │ 93.4416  │
│ 91  │ 18.985   │ -0.263626  │ 84.018   │
│ 92  │ 19.0234  │ 0.271521   │ 91.0181  │
│ 93  │ 18.8917  │ -0.817248  │ 89.1549  │
│ 94  │ 19.0851  │ -0.0368385 │ 107.179  │
│ 95  │ 19.742   │ -0.651228  │ 93.3474  │
│ 96  │ 19.4995  │ -0.719927  │ 94.4967  │
│ 97  │ 19.8692  │ -0.734804  │ 88.9912  │
│ 98  │ 20.348   │ -1.12102   │ 96.5933  │
│ 99  │ 20.1726  │ 0.675715   │ 101.17   │
│ 100 │ 20.0845  │ 0.179051   │ 98.3399  │
Plots.PyPlotBackend()

#+end_example

[[./corrplot.png]]

Related to corrplot is a cornerplot which displays the 1dimensional histograms for each variable at the top and side (instead of the main diagonal) and does not have the 2d histograms. However, the scatterplots for each variable pair are the same.

#+name: cornerplot
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots
df  = DataFrame(x = .8*rand(100).+0.2*collect(1:100), y = randn(100), z = collect(1:100).+5*randn(100))

@df df cornerplot(cols(1:3),grid=false,compact=true)
savefig("./cornerplot.png")
#+END_SRC

#+RESULTS: cornerplot
#+begin_example
100×3 DataFrame
│ Row │ x        │ y          │ z        │
│     │ Float64  │ Float64    │ Float64  │
├─────┼──────────┼────────────┼──────────┤
│ 1   │ 0.549145 │ -0.995965  │ -2.09422 │
│ 2   │ 1.00493  │ 0.797001   │ 7.36137  │
│ 3   │ 1.1856   │ 1.0137     │ 12.2814  │
│ 4   │ 1.24034  │ 3.34344    │ 2.36457  │
│ 5   │ 1.1796   │ 1.04035    │ 6.03621  │
│ 6   │ 1.9454   │ 0.732924   │ 4.14858  │
│ 7   │ 1.68027  │ 0.931571   │ 4.46706  │
│ 8   │ 2.20973  │ 0.716544   │ 5.13461  │
│ 9   │ 2.5017   │ -1.00824   │ 13.5968  │
│ 10  │ 2.5592   │ -0.712787  │ 8.55562  │
│ 11  │ 2.97356  │ 1.3047     │ 17.3782  │
│ 12  │ 2.43274  │ -0.249402  │ 18.8     │
│ 13  │ 3.11921  │ -1.40704   │ 10.9688  │
│ 14  │ 2.90782  │ -0.223429  │ 8.77966  │
│ 15  │ 3.75041  │ 1.01744    │ 11.662   │
│ 16  │ 3.87935  │ 1.38261    │ 24.2961  │
│ 17  │ 3.71425  │ 0.376715   │ 21.904   │
│ 18  │ 3.85361  │ 0.786971   │ 20.6746  │
│ 19  │ 4.39735  │ -0.872583  │ 21.5221  │
│ 20  │ 4.53899  │ -0.0276406 │ 12.2566  │
│ 21  │ 4.35767  │ -0.570648  │ 20.8053  │
│ 22  │ 5.01881  │ 0.308707   │ 20.8634  │
│ 23  │ 4.76902  │ 0.373842   │ 14.2772  │
│ 24  │ 4.81079  │ -0.0875071 │ 29.5217  │
│ 25  │ 5.24328  │ 1.07959    │ 25.9789  │
│ 26  │ 5.24658  │ -0.68592   │ 24.9336  │
│ 27  │ 5.76789  │ 0.757754   │ 26.4372  │
│ 28  │ 6.3501   │ -0.0411585 │ 29.7938  │
│ 29  │ 6.42286  │ -0.754961  │ 30.4257  │
│ 30  │ 6.18018  │ 0.29156    │ 25.3617  │
│ 31  │ 6.21956  │ -0.282002  │ 31.7801  │
│ 32  │ 6.53805  │ -0.5979    │ 31.3936  │
│ 33  │ 7.38595  │ 0.565232   │ 37.997   │
│ 34  │ 7.04875  │ 1.35968    │ 35.709   │
│ 35  │ 7.15948  │ -0.717207  │ 29.8558  │
│ 36  │ 7.81763  │ 1.80947    │ 42.6245  │
│ 37  │ 8.11384  │ -0.448895  │ 35.8122  │
│ 38  │ 7.66658  │ 0.551593   │ 38.2498  │
│ 39  │ 8.08556  │ 1.77385    │ 47.4302  │
│ 40  │ 8.54621  │ -1.11248   │ 41.0323  │
│ 41  │ 8.72412  │ -1.32158   │ 42.7058  │
│ 42  │ 9.05171  │ 0.223475   │ 40.6936  │
│ 43  │ 8.64604  │ 0.448572   │ 42.9401  │
│ 44  │ 9.19259  │ 0.822977   │ 48.0138  │
│ 45  │ 9.5514   │ 1.35536    │ 43.1309  │
│ 46  │ 9.70251  │ -1.6983    │ 53.0812  │
│ 47  │ 9.77808  │ 2.70999    │ 48.4578  │
│ 48  │ 9.76165  │ -1.31821   │ 51.6119  │
│ 49  │ 10.4348  │ 0.649624   │ 47.3983  │
│ 50  │ 10.7145  │ 0.871841   │ 42.6943  │
│ 51  │ 10.3045  │ 0.363978   │ 39.6065  │
│ 52  │ 10.6009  │ 1.02507    │ 59.7706  │
│ 53  │ 11.2761  │ 0.53518    │ 56.3491  │
│ 54  │ 10.8228  │ 1.82146    │ 61.3852  │
│ 55  │ 11.6398  │ 0.256946   │ 58.691   │
│ 56  │ 11.5412  │ -0.307149  │ 60.2463  │
│ 57  │ 11.7797  │ 1.53833    │ 52.8949  │
│ 58  │ 11.7999  │ -1.3622    │ 63.2159  │
│ 59  │ 12.3419  │ 1.09698    │ 60.8452  │
│ 60  │ 12.2411  │ 0.00616231 │ 64.9376  │
│ 61  │ 12.2143  │ -0.29153   │ 58.5079  │
│ 62  │ 12.5955  │ -0.171083  │ 54.0535  │
│ 63  │ 12.6755  │ -0.790349  │ 68.6242  │
│ 64  │ 13.1631  │ -1.06922   │ 73.8751  │
│ 65  │ 13.283   │ 0.462845   │ 63.9989  │
│ 66  │ 13.6977  │ 1.443      │ 65.4794  │
│ 67  │ 13.5658  │ -1.47396   │ 70.6635  │
│ 68  │ 13.8346  │ -0.203557  │ 61.5099  │
│ 69  │ 14.1551  │ 0.0015653  │ 80.1824  │
│ 70  │ 14.7628  │ -1.81273   │ 64.4542  │
│ 71  │ 14.4127  │ 0.202897   │ 77.5756  │
│ 72  │ 14.6976  │ -0.891042  │ 78.8274  │
│ 73  │ 14.7551  │ -1.28122   │ 80.525   │
│ 74  │ 15.1946  │ 0.813765   │ 65.0175  │
│ 75  │ 15.3756  │ -0.595635  │ 77.3025  │
│ 76  │ 15.7095  │ -0.0739004 │ 80.7275  │
│ 77  │ 16.0516  │ 0.824186   │ 80.0865  │
│ 78  │ 16.0247  │ 1.26714    │ 75.6747  │
│ 79  │ 15.9239  │ 0.314184   │ 77.1396  │
│ 80  │ 16.175   │ 0.747821   │ 80.1296  │
│ 81  │ 16.5792  │ 1.14421    │ 75.896   │
│ 82  │ 16.7705  │ -0.242211  │ 77.1906  │
│ 83  │ 17.1782  │ 1.05689    │ 79.1101  │
│ 84  │ 16.9917  │ -1.04533   │ 84.0849  │
│ 85  │ 17.7136  │ -0.757317  │ 81.8969  │
│ 86  │ 17.5403  │ -0.315255  │ 86.6932  │
│ 87  │ 18.0963  │ 1.19102    │ 88.0488  │
│ 88  │ 17.6811  │ -0.391778  │ 90.128   │
│ 89  │ 17.8007  │ -0.203498  │ 84.8286  │
│ 90  │ 18.6773  │ 0.169108   │ 86.07    │
│ 91  │ 18.6579  │ -0.457364  │ 91.7599  │
│ 92  │ 19.1076  │ -0.574503  │ 84.7163  │
│ 93  │ 19.073   │ 0.416273   │ 91.7023  │
│ 94  │ 18.9318  │ 0.520972   │ 96.8857  │
│ 95  │ 19.7467  │ -0.613112  │ 104.039  │
│ 96  │ 19.6262  │ 2.19182    │ 98.9867  │
│ 97  │ 19.8038  │ 1.09958    │ 94.109   │
│ 98  │ 19.7738  │ -0.202121  │ 101.187  │
│ 99  │ 20.136   │ -0.159767  │ 94.1935  │
│ 100 │ 20.7707  │ -0.898615  │ 92.9004  │

#+end_example
[[./cornerplot.png]]

** Violin plot
A violin plot gives a distribution of one variable (x) for subgroups indicated by another variable (z). The command is "@df df violin(:z,:x)"

#+name: violinplot
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots
df  = DataFrame(x =0.6*randn(100).+0.4*(collect(1:100).-30).^2, z = repeat([1, 2, 3, 4],outer=25))

@df df violin(:z,:x)
savefig("./violinplot.png")
#+END_SRC

#+RESULTS: violinplot
#+begin_example
100×2 DataFrame
│ Row │ x         │ z     │
│     │ Float64   │ Int64 │
├─────┼───────────┼───────┤
│ 1   │ 336.862   │ 1     │
│ 2   │ 312.805   │ 2     │
│ 3   │ 292.319   │ 3     │
│ 4   │ 270.733   │ 4     │
│ 5   │ 250.412   │ 1     │
│ 6   │ 230.144   │ 2     │
│ 7   │ 212.167   │ 3     │
│ 8   │ 193.551   │ 4     │
│ 9   │ 176.088   │ 1     │
│ 10  │ 159.543   │ 2     │
│ 11  │ 144.475   │ 3     │
│ 12  │ 129.654   │ 4     │
│ 13  │ 115.998   │ 1     │
│ 14  │ 102.119   │ 2     │
│ 15  │ 89.9373   │ 3     │
│ 16  │ 78.4341   │ 4     │
│ 17  │ 68.5697   │ 1     │
│ 18  │ 58.5049   │ 2     │
│ 19  │ 49.6161   │ 3     │
│ 20  │ 39.4643   │ 4     │
│ 21  │ 32.2007   │ 1     │
│ 22  │ 25.6718   │ 2     │
│ 23  │ 19.0176   │ 3     │
│ 24  │ 14.2428   │ 4     │
│ 25  │ 10.2788   │ 1     │
│ 26  │ 5.87535   │ 2     │
│ 27  │ 2.8428    │ 3     │
│ 28  │ 0.811937  │ 4     │
│ 29  │ -0.625973 │ 1     │
│ 30  │ 0.460517  │ 2     │
│ 31  │ 0.0774137 │ 3     │
│ 32  │ 2.11197   │ 4     │
│ 33  │ 4.53862   │ 1     │
│ 34  │ 6.25345   │ 2     │
│ 35  │ 8.8744    │ 3     │
│ 36  │ 14.6644   │ 4     │
│ 37  │ 20.2046   │ 1     │
│ 38  │ 25.7616   │ 2     │
│ 39  │ 31.9806   │ 3     │
│ 40  │ 40.7753   │ 4     │
│ 41  │ 48.4413   │ 1     │
│ 42  │ 57.7809   │ 2     │
│ 43  │ 69.1424   │ 3     │
│ 44  │ 78.4683   │ 4     │
│ 45  │ 89.3977   │ 1     │
│ 46  │ 102.838   │ 2     │
│ 47  │ 115.008   │ 3     │
│ 48  │ 129.825   │ 4     │
│ 49  │ 144.563   │ 1     │
│ 50  │ 160.541   │ 2     │
│ 51  │ 175.848   │ 3     │
│ 52  │ 194.64    │ 4     │
│ 53  │ 212.0     │ 1     │
│ 54  │ 229.7     │ 2     │
│ 55  │ 249.949   │ 3     │
│ 56  │ 270.134   │ 4     │
│ 57  │ 290.504   │ 1     │
│ 58  │ 313.411   │ 2     │
│ 59  │ 336.459   │ 3     │
│ 60  │ 360.028   │ 4     │
│ 61  │ 383.656   │ 1     │
│ 62  │ 409.535   │ 2     │
│ 63  │ 435.765   │ 3     │
│ 64  │ 462.989   │ 4     │
│ 65  │ 490.727   │ 1     │
│ 66  │ 518.621   │ 2     │
│ 67  │ 546.886   │ 3     │
│ 68  │ 576.641   │ 4     │
│ 69  │ 608.777   │ 1     │
│ 70  │ 638.593   │ 2     │
│ 71  │ 672.372   │ 3     │
│ 72  │ 705.224   │ 4     │
│ 73  │ 739.162   │ 1     │
│ 74  │ 775.053   │ 2     │
│ 75  │ 810.756   │ 3     │
│ 76  │ 846.608   │ 4     │
│ 77  │ 883.791   │ 1     │
│ 78  │ 920.216   │ 2     │
│ 79  │ 960.25    │ 3     │
│ 80  │ 999.533   │ 4     │
│ 81  │ 1040.87   │ 1     │
│ 82  │ 1082.3    │ 2     │
│ 83  │ 1123.92   │ 3     │
│ 84  │ 1166.85   │ 4     │
│ 85  │ 1210.15   │ 1     │
│ 86  │ 1254.87   │ 2     │
│ 87  │ 1299.24   │ 3     │
│ 88  │ 1346.35   │ 4     │
│ 89  │ 1392.22   │ 1     │
│ 90  │ 1439.17   │ 2     │
│ 91  │ 1488.18   │ 3     │
│ 92  │ 1539.12   │ 4     │
│ 93  │ 1587.91   │ 1     │
│ 94  │ 1638.78   │ 2     │
│ 95  │ 1689.74   │ 3     │
│ 96  │ 1742.67   │ 4     │
│ 97  │ 1796.25   │ 1     │
│ 98  │ 1849.41   │ 2     │
│ 99  │ 1904.25   │ 3     │
│ 100 │ 1959.08   │ 4     │

#+end_example

[[./violinplot.png]]

** Box plot

#+name: boxplot
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots
df  = DataFrame(x =0.6*randn(100).+0.4*(collect(1:100).-30).^2, z = repeat([1, 2, 3, 4],outer=25));

@df df boxplot(:z,:x)
savefig("./boxplot.png")
#+END_SRC

#+RESULTS: boxplot
#+begin_example
100×2 DataFrame
│ Row │ x        │ z     │
│     │ Float64  │ Int64 │
├─────┼──────────┼───────┤
│ 1   │ 336.147  │ 1     │
│ 2   │ 313.85   │ 2     │
│ 3   │ 290.956  │ 3     │
│ 4   │ 270.613  │ 4     │
│ 5   │ 249.266  │ 1     │
│ 6   │ 230.78   │ 2     │
│ 7   │ 211.501  │ 3     │
│ 8   │ 193.085  │ 4     │
│ 9   │ 175.88   │ 1     │
│ 10  │ 160.966  │ 2     │
│ 11  │ 144.216  │ 3     │
│ 12  │ 129.817  │ 4     │
│ 13  │ 115.217  │ 1     │
│ 14  │ 102.956  │ 2     │
│ 15  │ 89.8619  │ 3     │
│ 16  │ 77.2391  │ 4     │
│ 17  │ 66.7621  │ 1     │
│ 18  │ 57.2164  │ 2     │
│ 19  │ 47.9546  │ 3     │
│ 20  │ 40.2005  │ 4     │
│ 21  │ 32.7428  │ 1     │
│ 22  │ 25.2096  │ 2     │
│ 23  │ 19.8558  │ 3     │
│ 24  │ 14.3416  │ 4     │
│ 25  │ 9.52856  │ 1     │
│ 26  │ 6.15332  │ 2     │
│ 27  │ 4.54707  │ 3     │
│ 28  │ 1.88373  │ 4     │
│ 29  │ 1.05935  │ 1     │
│ 30  │ 0.415273 │ 2     │
│ 31  │ 1.13681  │ 3     │
│ 32  │ 0.672296 │ 4     │
│ 33  │ 2.85032  │ 1     │
│ 34  │ 7.29991  │ 2     │
│ 35  │ 10.9749  │ 3     │
│ 36  │ 15.913   │ 4     │
│ 37  │ 18.9736  │ 1     │
│ 38  │ 25.8711  │ 2     │
│ 39  │ 32.1087  │ 3     │
│ 40  │ 40.6575  │ 4     │
│ 41  │ 48.7747  │ 1     │
│ 42  │ 57.8218  │ 2     │
│ 43  │ 66.6936  │ 3     │
│ 44  │ 77.5205  │ 4     │
│ 45  │ 89.259   │ 1     │
│ 46  │ 101.402  │ 2     │
│ 47  │ 115.238  │ 3     │
│ 48  │ 129.756  │ 4     │
│ 49  │ 145.1    │ 1     │
│ 50  │ 160.059  │ 2     │
│ 51  │ 176.269  │ 3     │
│ 52  │ 193.749  │ 4     │
│ 53  │ 212.068  │ 1     │
│ 54  │ 229.548  │ 2     │
│ 55  │ 249.729  │ 3     │
│ 56  │ 271.187  │ 4     │
│ 57  │ 291.523  │ 1     │
│ 58  │ 312.928  │ 2     │
│ 59  │ 336.195  │ 3     │
│ 60  │ 359.622  │ 4     │
│ 61  │ 383.758  │ 1     │
│ 62  │ 409.638  │ 2     │
│ 63  │ 435.853  │ 3     │
│ 64  │ 463.049  │ 4     │
│ 65  │ 489.282  │ 1     │
│ 66  │ 519.6    │ 2     │
│ 67  │ 548.815  │ 3     │
│ 68  │ 577.891  │ 4     │
│ 69  │ 608.077  │ 1     │
│ 70  │ 640.337  │ 2     │
│ 71  │ 672.252  │ 3     │
│ 72  │ 706.136  │ 4     │
│ 73  │ 738.983  │ 1     │
│ 74  │ 773.158  │ 2     │
│ 75  │ 810.936  │ 3     │
│ 76  │ 846.737  │ 4     │
│ 77  │ 884.076  │ 1     │
│ 78  │ 921.518  │ 2     │
│ 79  │ 961.059  │ 3     │
│ 80  │ 1000.67  │ 4     │
│ 81  │ 1040.27  │ 1     │
│ 82  │ 1081.86  │ 2     │
│ 83  │ 1124.21  │ 3     │
│ 84  │ 1165.94  │ 4     │
│ 85  │ 1210.03  │ 1     │
│ 86  │ 1255.0   │ 2     │
│ 87  │ 1298.23  │ 3     │
│ 88  │ 1346.73  │ 4     │
│ 89  │ 1392.51  │ 1     │
│ 90  │ 1440.72  │ 2     │
│ 91  │ 1488.63  │ 3     │
│ 92  │ 1539.19  │ 4     │
│ 93  │ 1587.44  │ 1     │
│ 94  │ 1638.62  │ 2     │
│ 95  │ 1690.56  │ 3     │
│ 96  │ 1742.85  │ 4     │
│ 97  │ 1796.46  │ 1     │
│ 98  │ 1849.08  │ 2     │
│ 99  │ 1904.28  │ 3     │
│ 100 │ 1960.59  │ 4     │

#+end_example

[[./boxplot.png]]

#+name: boxviolindotplot
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots
df  = DataFrame(x =0.6*randn(100).+0.4*(collect(1:100).-30).^2, z = repeat([1, 2, 3, 4],outer=25));

@df df boxplot(:z,:x)
@df df violin!(:z,:x,marker=(0.3,:orange,stroke(2)), alpha=0.75)
@df df dotplot!(:z,:x,marker=(:black,stroke(0)))
savefig("./boxviodotplot.png")
#+END_SRC

#+RESULTS: boxviolindotplot
#+begin_example
100×2 DataFrame
│ Row │ x         │ z     │
│     │ Float64   │ Int64 │
├─────┼───────────┼───────┤
│ 1   │ 336.724   │ 1     │
│ 2   │ 313.576   │ 2     │
│ 3   │ 292.078   │ 3     │
│ 4   │ 270.246   │ 4     │
│ 5   │ 250.528   │ 1     │
│ 6   │ 230.036   │ 2     │
│ 7   │ 211.12    │ 3     │
│ 8   │ 193.738   │ 4     │
│ 9   │ 175.876   │ 1     │
│ 10  │ 160.399   │ 2     │
│ 11  │ 144.797   │ 3     │
│ 12  │ 129.984   │ 4     │
│ 13  │ 115.83    │ 1     │
│ 14  │ 102.87    │ 2     │
│ 15  │ 90.1872   │ 3     │
│ 16  │ 77.8168   │ 4     │
│ 17  │ 66.1594   │ 1     │
│ 18  │ 57.7838   │ 2     │
│ 19  │ 48.2422   │ 3     │
│ 20  │ 39.4165   │ 4     │
│ 21  │ 32.0685   │ 1     │
│ 22  │ 25.5404   │ 2     │
│ 23  │ 21.6206   │ 3     │
│ 24  │ 13.7109   │ 4     │
│ 25  │ 9.77889   │ 1     │
│ 26  │ 6.31756   │ 2     │
│ 27  │ 3.58759   │ 3     │
│ 28  │ 0.716058  │ 4     │
│ 29  │ 0.352936  │ 1     │
│ 30  │ -0.455151 │ 2     │
│ 31  │ 0.162089  │ 3     │
│ 32  │ 2.19819   │ 4     │
│ 33  │ 4.09914   │ 1     │
│ 34  │ 5.55456   │ 2     │
│ 35  │ 9.91144   │ 3     │
│ 36  │ 14.7441   │ 4     │
│ 37  │ 18.452    │ 1     │
│ 38  │ 25.4078   │ 2     │
│ 39  │ 31.9254   │ 3     │
│ 40  │ 40.8932   │ 4     │
│ 41  │ 48.7083   │ 1     │
│ 42  │ 57.6766   │ 2     │
│ 43  │ 67.3642   │ 3     │
│ 44  │ 78.4231   │ 4     │
│ 45  │ 90.653    │ 1     │
│ 46  │ 102.529   │ 2     │
│ 47  │ 114.897   │ 3     │
│ 48  │ 129.732   │ 4     │
│ 49  │ 144.693   │ 1     │
│ 50  │ 159.636   │ 2     │
│ 51  │ 176.651   │ 3     │
│ 52  │ 193.882   │ 4     │
│ 53  │ 211.413   │ 1     │
│ 54  │ 230.285   │ 2     │
│ 55  │ 249.482   │ 3     │
│ 56  │ 270.748   │ 4     │
│ 57  │ 290.619   │ 1     │
│ 58  │ 313.688   │ 2     │
│ 59  │ 336.824   │ 3     │
│ 60  │ 358.937   │ 4     │
│ 61  │ 383.609   │ 1     │
│ 62  │ 408.984   │ 2     │
│ 63  │ 436.455   │ 3     │
│ 64  │ 462.425   │ 4     │
│ 65  │ 489.932   │ 1     │
│ 66  │ 519.149   │ 2     │
│ 67  │ 547.574   │ 3     │
│ 68  │ 577.502   │ 4     │
│ 69  │ 608.001   │ 1     │
│ 70  │ 640.225   │ 2     │
│ 71  │ 671.817   │ 3     │
│ 72  │ 706.172   │ 4     │
│ 73  │ 738.912   │ 1     │
│ 74  │ 774.644   │ 2     │
│ 75  │ 810.446   │ 3     │
│ 76  │ 846.835   │ 4     │
│ 77  │ 883.522   │ 1     │
│ 78  │ 921.381   │ 2     │
│ 79  │ 960.271   │ 3     │
│ 80  │ 1000.54   │ 4     │
│ 81  │ 1040.16   │ 1     │
│ 82  │ 1081.49   │ 2     │
│ 83  │ 1123.3    │ 3     │
│ 84  │ 1166.61   │ 4     │
│ 85  │ 1210.73   │ 1     │
│ 86  │ 1255.27   │ 2     │
│ 87  │ 1298.28   │ 3     │
│ 88  │ 1344.88   │ 4     │
│ 89  │ 1391.95   │ 1     │
│ 90  │ 1440.95   │ 2     │
│ 91  │ 1489.12   │ 3     │
│ 92  │ 1536.95   │ 4     │
│ 93  │ 1586.56   │ 1     │
│ 94  │ 1637.49   │ 2     │
│ 95  │ 1689.31   │ 3     │
│ 96  │ 1741.7    │ 4     │
│ 97  │ 1795.22   │ 1     │
│ 98  │ 1848.87   │ 2     │
│ 99  │ 1903.7    │ 3     │
│ 100 │ 1960.19   │ 4     │



#+end_example


[[./boxviodotplot.png]]
** Bar charts

#+name: barchart
#+BEGIN_SRC julia :exports both :returns output :tangle yes :results output 

using DataFrames, Plots, StatsPlots
X = rand(10,3)
df  = DataFrame(x = X[:,1], y = X[:,3], z = X[:,3])

@df df groupedbar(hcat(:x,:y,:z), bar_position = :dodge, bar_width=0.7)
savefig("./barchart1.png")

@df df groupedbar(hcat(:x,:y,:z), bar_position = :stack, bar_width=0.7)
savefig("./barchart2.png")
#+END_SRC

#+RESULTS: barchart
#+begin_example
10×3 Array{Float64,2}:
 0.422152   0.93206   0.276358 
 0.0884199  0.553848  0.298834 
 0.972956   0.722714  0.696704 
 0.0376525  0.320394  0.93858  
 0.993953   0.967588  0.0318959
 0.245505   0.403455  0.197188 
 0.273039   0.628566  0.54014  
 0.346338   0.498151  0.655484 
 0.413208   0.129419  0.97968  
 0.172421   0.195156  0.121658 
10×3 DataFrame
│ Row │ x         │ y         │ z         │
│     │ Float64   │ Float64   │ Float64   │
├─────┼───────────┼───────────┼───────────┤
│ 1   │ 0.422152  │ 0.276358  │ 0.276358  │
│ 2   │ 0.0884199 │ 0.298834  │ 0.298834  │
│ 3   │ 0.972956  │ 0.696704  │ 0.696704  │
│ 4   │ 0.0376525 │ 0.93858   │ 0.93858   │
│ 5   │ 0.993953  │ 0.0318959 │ 0.0318959 │
│ 6   │ 0.245505  │ 0.197188  │ 0.197188  │
│ 7   │ 0.273039  │ 0.54014   │ 0.54014   │
│ 8   │ 0.346338  │ 0.655484  │ 0.655484  │
│ 9   │ 0.413208  │ 0.97968   │ 0.97968   │
│ 10  │ 0.172421  │ 0.121658  │ 0.121658  │


#+end_example


[[./barchart1.png]]

[[./barchart2.png]]
