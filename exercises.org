#+Title: Exercises
#+Author: Christoph Schottm√ºller

* Week 2
1. Type the following code into the REPL
   #+begin_src julia
     var1 = "a"

     var2 = 'b'
   #+end_src
   What does the code do? Which of the following lines of code are valid and which will give you an error? First think what you expect to happen and then check.
   #+begin_src julia
     var1+var2

     var1*var2

     var1+1

     var2+1

     var1*1

     var2*1

     var1^3

     var2^3

     var1 < "c"

     var1 < 'c'

     var2 > 'c'

     var1*"1+$var2"

     var1*"$(1+var2)"

     "var1*$(var2)"

     "$(var1)*$(var2)"

     length(var1)+2

     length(var2)+3

     [i for i in 1:10]

     string("0",join([i for i in 1:9]))

     join("0",[i for i in 1:9])

     string("0",[i for i in 1:9])

     [var1+i for i in 1:5]

     [string(var1,i) for i in 1:5]

     join([var2+i for i in 1:5])

     string(2,pad=4)
   #+end_src

2. Using list comprehension create an array that contains all the lower case characters of the alphabet and bind this array to the variable name /alphabet/. (/Hint:/ Recall that /'a'+0='a'/, /'a'+1='b'/ etc.)

   Then create a single string that contains all the letters of the alphabet and bind it to the name /alphabetstring/. Also create another string variable /alphabetcomma/ that contains all letters of the alphabet separated by comma.

   Next create an array that contains the string "letter number 1 in the alphabet is a" as first element, the string "letter number 2 in the alphabet is b" as its second element and so on until "letter number 26 in the alphabet is z".
  #+begin_src julia :exports none
   alphabet = ['a'+i for i in 0:25]
   alphabetstring = join(alphabet)
   alphabetstring = join(alphabet, ", ")
   ["letter number $(i) in the alphabet is $(alphabet[i])" for i in 1:26]
  #+end_src

3. Use the /string/ function with the keyword /pad/ as well as a list comprehension and the /join/ function to create a string "101001000100001000001000000100000001". Can you also do it without using /pad/ (and without typing it in digit by digit, of course)?
   #+begin_src julia :exports none
    join([string(1;pad=i) for i in 1:7])
    string(join(["1"*"0"^i for i in 1:7]),"1")
   #+end_src

* Week 3
1. Out of how many code blocks does the following code block consist and what does the function /move1/ do?
   #+begin_src julia
     var = "xyz"
     function move1(input)
	 output = string(input[2:end],input[1])
	 return output
     end
     move1(var)
   #+end_src
   
2. If we add the following to the code of the previous exercise
   #+begin_src julia
     function move1(input::Number)
	 output = input + 1
	 return output
     end
   #+end_src
   What output do you expect for the following function calls? Think first before trying!
   #+begin_src julia
     move1(3)
     move1(3.0)
     move1("3")
     move1("3.0")
     move1('3')
     move1([1, 2, 3])
   #+end_src

3. Write a function /addfractions(numerator1,denominator1,numerator2,denominator2)/ that returns the sum of the fractions $numerator1/denominator1$  and $numerator2/denominator2$ as $numeratorSum,denominatorSum$; e.g. /addfractions(1,2,1,3)/ should return $5,6$ as $1/2+1/3=5/6$. (Note that you do not have to cancel common multipliers in the result.)
   #+begin_src julia :exports none
    function addfractions(numerator1,denominator1,numerator2,denominator2)
 	 denominatorSum = denominator1*denominator2
 	 numeratorSum = numerator1*denominator2 + numerator2*denominator1
 	 return numeratorSum, denominatorSum
    end
   #+end_src

4. Write a function /evaluatef/ that takes two inputs: (i) another function (that I call /f/ in the following), (ii) a range (e.g. 1:5). The function /evaluatef/ should evaluate /f/ at each point of the range and print the output. For example, if $f(x)=x^2$, then $evaluatef(f,1:3)$ should print:
    #+begin_quote
    f(1) equals 1
    
    f(2) equals 4
    
    f(3) equals 9
    #+end_quote
     (/Hint:/ to get the text printed line by line you have to recall what we did last week, namely list comprehension and escape sequences.)
   #+begin_src julia :exports none
     function evaluatef(f,range)
 	println(join(["f($(i)) equals $(f(i)) \n" for i in range]))
     end
   #+end_src
 

* Week 4
1. Use an /if/ condition to write a function that returns the absolute value of a number.
   #+begin_src julia :exports none
     function abs(x::Number)
	 if x<0
	     return -x
	 else
	     return x
	 end
     end
   #+end_src

2. Write a function /dotprod/ that calculates the dot product of two vectors; i.e. /dotprod(a,b)/ where /a/ and /b/ are arrays of $n$ numbers should return  $a_1*b_1+a_2*b_2+...+a_n*b_n$. For example, /dotprod([1,2,3],[0,1,2])/ should return 8. (Of course, julia has such a function built in but programming such a function yourself is a nice exercise to see how loops are used.)

   #+begin_src julia :exports none
     function dotprod(a,b)
	 n = length(a)
	 value = zero(a[1])
	 for i in 1:n
	     value = value + a[i]*b[i]
	 end
         return value
     end
     dotprod([1,2,3],[0,1,2])
   #+end_src

3. In the following we write a function that solves the equation $f(x)=0$ for some function $f$. (As an example, suppose we want to know for which value of $x$ the equation $3^x=2$ holds, i.e. for which $x$ we have $3^x-2=0$. Then the function is $f(x)=3^x-2$.)

   We will use a method called "bisection". Our function /bisect(f,a,b,eps)/ takes as inputs: (i) the function $f$ ($3^x-2$ in our example), (ii) values $a$ and $b$ for which we know that $f(a)$ and $f(b)$ have opposite signs (e.g. we could use 0 and 1 in our example as we know that $3^0-2=-1<0$ and $3^1-2=1>0$), (iii) a small positive number $eps$ which is the precision of our solution method, i.e. we consider $f(x)$ as being zero whenever $|f(x)|\leq eps$ (for example we could use $0.0001$ and be satisfied with every $x$ that yields $|f(x)|\leq0.0001$ as a solution to our equation).

   The method works as follows: We know that there is an $x$ between $a$ and $b$ such that $f(x)=0$. Next we check the function value at the midpoint, i.e. $f((a+b)/2)$. If $f((a+b)/2)$ has the same sign as $f(a)$, then $(a+b)/2$ becomes our "new $a$" and we know that the $x$ we are looking for is between $(a+b)/2$ and $b$. If, however, $f((a+b)/2)$ has the same sign as $f(b)$, then $(a+b)/2$ is our "new $b$" and we know that the $x$ we are looking for is between $a$ and $(a+b)/2$. (In our example, $3^{1/2}-2=-0.2679...<0$ and therefore we know that the $x$ is between $1/2$ and $1$.) Then we iterate this procedure: In each step we compute $f((a+b)/2)$ with the current $a$ and $b$ and get a new smaller interval in which our $x$ lies. We stop iterating if $|f((a+b)/2)|\leq eps$ and return $(a+b)/2$ as the result then.

   #+begin_src julia :exports none
     function bisect(f,a,b,eps)
	 global ai, bi = a,b
	 global midpoint = (ai+bi)/2
	 global fmidpoint = f(midpoint)
	 while (f(midpoint)>eps) || (f(midpoint)<-eps)
	     if fmidpoint*f(ai)>0
		 ai = midpoint
	     else
		 bi = midpoint
	     end
	     midpoint = (ai+bi)/2
	     fmidpoint = f(midpoint)	 	 
	 end
	 return midpoint
     end
     bisect(x->3^x-2,0,1,1e-10)
   #+end_src

* Week 5
1. A consumer consumes two perfectly divisible goods $x_1$ and $x_2$. The price of one unit of good 1 is 1 while the price of one unit of good 2 is 2. The utility function of the consumer is $u(x_1,x_2)=x_1^{1/2}x_2^{1/2}$ and his income is 12. Use julia to solve the consumers utility maximization problem, i.e. how many units of each good will the consumer consume? What is his utility level?
#+begin_src julia :exports none
  using Optim
  u(x1,x2) = x1^0.5*x2^0.5
  v(x1) = -u(x1,(12-x1)/2)
  res = optimize(v,0,12)
  x1star = Optim.minimizer(res)
  x2star = (12-x1star)/2
  ustar = u(x1star,x2star)
#+end_src

2. Using the previous exercise and your results from there: plot the budget line and the indifference curve at maximal utility level of the consumer in a graph. (/Hint:/ write down the functional equation of the indifference curve and the budget line by hand first.)

   #+begin_src julia :exports none
     using Plots
     using LaTeXStrings
     bl(x1) = (12-x1)/2
     icx2(x1) = ustar^2/x1
     plot([bl,icx2],0.01:0.01:12;ylim=(0,6),label=["budget line" "indifference curve"],linewidth=2,xlabel=L"$x_1$",ylabel=L"$x_2$")
   #+end_src

3. Write a function that takes the filename of a text file as input and returns how often the letter 'z' is used in this text file. Download the file [[https://www.gutenberg.org/cache/epub/7207/pg7207.txt][pg7207.txt]] (which contains the text of the book "Menschliches, Allzumenschliches" by F.W. Nietzsche as provided by Project Gutenberg) and count the number of 'z' in there.   
#+begin_src julia :exports none
  function countz(filename)
      f = open(filename,"r")
      text = read(f,String)
      close(f)
      countz = 0
      for letter in text
	  if letter == 'z'
	      countz = countz +1
	  end
      end
      return countz
  end
#+end_src

4. Generalize your function from the previous exercise such that it takes two arguments as input: the filename and the letter that should be counted (i.e. the new function cannot only count how many 'z' there are but how many 'a', 'b' etc. there are). If you have managed that, you may want to generalize further: the actual text of the book starts in our file only in line 50 and ends in line 11500. Write a function that takes the range of lines in which the counting should take place as an additional input.
#+begin_src julia :exports none
  function countchar(filename,searchletter)
      f = open(filename,"r")
      text = read(f,String)
      close(f)
      count = 0
      for letter in text
	  if letter == searchletter
	      count = count +1
	  end
      end
      return count
  end
  countchar("./allzumenschliches.txt",'z')
#+end_src

#+begin_src julia :exports none
  function countchar(filename,searchletter,searchrange)
      f = open(filename,"r")
      textlines = readlines(f)
      close(f)
      text = join(textlines[searchrange])
      count = 0
      for letter in text
	  if letter == searchletter
	      count = count +1
	  end
      end
      return count
  end
  countchar("./allzumenschliches.txt",'z',50:11500)
#+end_src


* Week 6
1. Let market demand be $D(p)=10-p$ if $p<10$ and $D(p)=0$ if $p\geq10$. Let market supply be $S(p)=2p-2$ if $p>1$ and 0 else. Use the julia Roots.jl package to compute the market equilibrium (price and quantity). (Hint: Market equilibrium occurs where the difference between demand and supply is zero.) Plot supply and demand to verify your result graphically. 
#+begin_src julia :exports none
  using Roots
  function D(p)
      if p<10
	  return 10-p
      else
	  return 0.0
      end
  end
  function S(p)
      if p>1
	  return 2p-2
      else
	  return 0.0
      end
  end
  excessDemand(p)=D(p)-S(p)
  pstar = fzero(excessDemand,5.0)
  qstar = D(pstar)
#+end_src

2. Recall that the expected value of a continuously distributed random variable is calculated as $\int_a^b xf(x)\,dx$ where $f$ is the density of the random variable and $[a,b]$ is the support of the distribution (i.e. the density of the random variable is 0 outside the interval $[a,b]$). Consider a random variable with triangular density namely $f(x)=2x$ for $x\in[0,1]$ and $f(x)=0$ for $x\not\in[0,1]$ and use integration with the QuadGK.jl package to compute its expected value.
#+begin_src julia :exports none
  using QuadGK
  function f(x)
      if 0<x<1
	  return 2x
      else
	  return 0.0
      end
  end
  quadgk(x-> x*f(x),0,1)[1]
#+end_src

3. A consumer consumes 3 perfectly divisible goods $x_1$, $x_2$ and $x_3$. The price of one unit of good 1 is 1 while the price of one unit of good 2 is 2 and the price of good 3 is $3$. The utility function of the consumer is $u(x_1,x_2)=x_1*x_2*x_3$ and his income is 12. Use julia to solve the consumers utility maximization problem, i.e. how many units of each good will the consumer consume? What is his utility level? (Hint: Solve the budget constraint for one of the variables and plug it into the objective. The resulting objective you still have to maximize over two variables.)  
#+begin_src julia :exports none
  using Optim
  u(x1,x2,x3) = x1*x2*x3
  v(x) = -u(x[1],x[2],(12-x[1]-2*x[2])/3)
  res = optimize(v,[1.0,1.0])
  x1star,x2star = Optim.minimizer(res)[1],Optim.minimizer(res)[2]
  x3star = (12-x1star-2*x2star)/3
  ustar = u(x1star,x2star,x3star)
#+end_src

* Week 7
data

* Week 8
OLS

* Week 9
1. Use the monopoly pricing problem from notebook 5 and use $\alpha=2$ but now change the cost function to $c(q)=\beta q^2$. Plot the monopoly price as a function of $\beta$.

2. Use the Cournot model from notebook 5 and determine the solution if the costs of firm $i$ are not $c_i*q_i$ but $c_i*q_i^2$.

3. Write a function /npv(payments,delta)/ where /payments/ is a vector of annual payments (i.e. the /n/th element of /payments/ contains a payment in year /n/) and /delta/ is a discount factor, i.e. a number between 0 and 1. The function /npv/ returns the net present value of the payment stream discounted with the discount factor. For example, if $npv([2.0,3.0,-4.0],0.9)=2.0+3.0*0.9-4.0*0.9^2$. Suppose an investor is considering to buy a house and then rent it out. The price of the house is 500.000 and the investor would charge a rent of 15000 per year. Furthermore, the investor expects to be able to resell the house after 20 years for a price of 250.000. Plot the net present value of this investment as a function of the discount factor $\delta$.
